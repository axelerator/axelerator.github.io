<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://blog.axelerator.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.axelerator.de/" rel="alternate" type="text/html" /><updated>2023-11-15T21:03:17-05:00</updated><id>https://blog.axelerator.de/feed.xml</id><title type="html">Rants &amp;amp; ramblings of yours truly</title><subtitle>Mostly posts about how to make getting started with Elm easy and the general joys of functional programming.</subtitle><entry xml:lang="en"><title type="html">Dynamic Diagrams</title><link href="https://blog.axelerator.de/development/en/liquid-diagrams" rel="alternate" type="text/html" title="Dynamic Diagrams" /><published>2023-11-15T15:00:00-05:00</published><updated>2023-11-15T15:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/liquid-diagrams-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/liquid-diagrams"><![CDATA[<p><img src="/assets/posts/liquid-diagrams/ld.webp" width="130" style="float:right; margin: 5px 10px 10px 0" />
Static images, videos, and SVG animations come each with their own challenges when it comes to 
visualize complex systems through diagrams.
I’ve developed a mini language and web component to add a narrative element to diagrams.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#solutions">Existing solutions</a></li>
  <li><a href="#liquid">A new simple language for interactive diagrams</a></li>
</ul>

<hr />

<p>Technical documentation is an essential component for explaining complex
systems. To effectively represent the relationships between system components,
diagrams have become a staple. However, as systems grow in complexity, so do
their diagrams, often leading to representations that are complicated and
challenging to follow. Additionally, capturing changes over time in static
diagrams presents a significant hurdle.</p>

<style>
    liquid-diagram rect {
        fill: #CCC;
    }
    liquid-diagram path {
        stroke: #333;
    }
    liquid-diagram text {
        font-size: 0.15em;
    }
    liquid-diagram button {
      width: auto;
      font-size: 0.5em;
      line-height: 0.5em;
      margin: 0 0.25em;
    }
    liquid-diagram input[type="range"] {
      flex: 1;
    }

  </style>

<p><label for="def-help" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-help" class="margin-toggle" />
<span class="marginnote">
You can yog through the different states of the diagram using the arrow buttons ⬅ ➡ or the slider.<br />
With the ✏️  button you can view <strong>and</strong> update the source of the diagram.
</span></p>

<figure>
<liquid-diagram style="width: 100%; display: block">
add "A"
  pos 0 -35
  size 20 15
add "B"
  pos -35 5
  size 20 15
add "C"
  pos 20 35
  size 20 15
|- m1 -|
connect "A" "B" "First"
|- - -|
connect "B" "C" "Second"
|- closing the loop -|
connect "C" "A" "Third"
|- dance! -|
update "C"
  pos 0 -35
update "A"
  pos -35 5
update "B"
  pos 20 35
</liquid-diagram>
</figure>

<h3 id="-current-solutions-and-their-limitations"><a name="solutions"></a> Current Solutions and Their Limitations</h3>

<p>Currently, there are a few approaches to address these issues:</p>

<ol>
  <li>
    <p><strong>Multiple Static Images</strong>: Breaking down evolving diagrams into several
static images is common. However, this method can be cumbersome, as it
forces readers to scroll up and down to reference different stages of the
diagram.</p>
  </li>
  <li>
    <p><strong>Video Format</strong>: Using videos to animate diagrams adds a dynamic aspect,
making it easier to understand changes over time. But video production
demands specific skills and often results in large file sizes, which is not
ideal for quick loading web documentation.</p>
  </li>
  <li>
    <p><strong>SVG Animations</strong>: SVG, combined with CSS and JS animations, is another
method to create dynamic diagrams. While promising, this approach requires
technical writers to have specific skills and potentially expensive tools.</p>
  </li>
</ol>

<h3 id="-a-new-simple-language-for-interactive-diagrams"><a name="liquid"></a> A new simple language for interactive diagrams</h3>

<p>Personally, I’ve always been a fan of <label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/liquid-diagrams/mermaid-logo.svg" style="width: 25%; background-color: #888" />
<a href="https://mermaid.js.org">Mermaid</a> is a JavaScript based diagramming and charting tool that renders
Markdown-inspired text definitions to create and modify diagrams dynamically.
</span>
 MermaidJS. Like many developers, I
appreciate how text-based diagram generators strip away much of the complexity
associated with visual tools like <a href="https://inkscape.org">Inkscape or</a> or <a href="https://app.diagrams.net">diagrams.net</a>. 
Text based tools like MermaidJS, have garnered widespread appreciation for their simplicity
and effectiveness. The real charm lies in their ability to convert short,
concise text into elaborate diagrams. This textual approach not only makes
diagram creation easier but also integrates seamlessly with version control
systems, maintaining clear semantics across multiple commits.
If you’re documentation lives as Markdown files on Github you can <a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">embed your diagrams</a> 
without the need to include any additional tools.</p>

<p>Most times, when I set out to create a diagram, I find myself needing just a
few boxes connected by arrows. However, I’ve always yearned for a way to
narrate a story through my diagrams, to gradually introduce elements like boxes
and arrows rather than presenting everything all at once. This led me to
develop a new language and web component that accomplishes exactly this. With
my tool, you can easily build your narrative, adding elements to your diagram
step by step, making the complex information more digestible and engaging.</p>

<p>If you want to try it out feel free to <a href="/assets/js/liquid-diagrams.js">download the webcomponent</a>.
Include it <strong>at the end</strong> of your HTML document after you’ve specified your <code class="language-plaintext highlighter-rouge">liquid-diagram</code> elements.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;liquid-diagram</span> <span class="na">style=</span><span class="s">"display: block"</span><span class="nt">&gt;</span>
add "A"
  pos -10 -7
  size 20 15
add "B"
  pos -35 -35
  size 20 15
|- then -|
connect "A" "B" "A to B"
<span class="nt">&lt;/liquid-diagram&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/liquid-diagrams.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>

<figure>
<liquid-diagram style="display: block">
add "client1"
  pos -30 -35
  size 15 10
|- m1 -|
add "load-balancer"
  pos -10 -5
  size 25 10
add "app-server1"
  pos -30 15
  size 25 10
add "app-server2"
  pos 20 15
  size 25 10
add "db"
  pos -10 35
  size 25 10
|- m2 -|
connect "client1" "load-balancer"
|- m3 -|
connect "load-balancer" "app-server1"
connect "app-server1" "db"
|- m3 -|
add "client2"
  pos 10 -35
  size 15 10
|- m4 -|
connect "client2" "load-balancer"
connect "load-balancer" "app-server2"
connect "app-server2" "db"
</liquid-diagram>
</figure>

<script src="/assets/js/liquid-diagrams.js"></script>]]></content><author><name></name></author><category term="diagrams" /><category term="visualization" /><category term="documentation" /><summary type="html"><![CDATA[Static images, videos, and SVG animations come each with their own challenges when it comes to visualize complex systems through diagrams. I’ve developed a mini language and web component to add a narrative element to diagrams.]]></summary></entry><entry xml:lang="de"><title type="html">Dynamische Diagramme</title><link href="https://blog.axelerator.de/development/de/liquid-diagrams" rel="alternate" type="text/html" title="Dynamische Diagramme" /><published>2023-11-15T15:00:00-05:00</published><updated>2023-11-15T15:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/liquid-diagrams-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/liquid-diagrams"><![CDATA[<p><img src="/assets/posts/liquid-diagrams/ld.webp" width="130" style="float:right; margin: 5px 10px 10px 0" />
Statische Bilder, Videos und SVG-Animationen bringen jeweils ihre eigenen Herausforderungen mit sich, wenn es darum geht 
komplexe Systeme durch Diagramme zu visualisieren.
Ich habe eine Minisprache und eine Webkomponente entwickelt, um Diagrammen ein erzählerisches Element hinzuzufügen.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#solutions">Aktuellen Lösungsansätze und ihre Grenzen</a></li>
  <li><a href="#liquid">Eine neue, einfache Sprache für interaktive Diagramme</a></li>
</ul>

<hr />

<p>Technische Dokumentation ist ein wesentlicher Bestandteil zur Erläuterung komplexer
Systeme. Um die Beziehungen zwischen den Systemkomponenten effektiv darzustellen,
sind Diagramme ein wesetnloches Wergzeug. 
Mit zunehmender Komplexität der Systeme wachsen jedoch auch
die dazugehörigen Diagramme, was oft zu komplizierten und schwer verständlichen Darstellungen führt.
Eine der größten Herausforderungen ist es zeitliche Abläufe verständlich abzubilden.</p>

<style>
    liquid-diagram rect {
        fill: #CCC;
    }
    liquid-diagram path {
        stroke: #333;
    }
    liquid-diagram text {
        font-size: 0.15em;
    }
    liquid-diagram button {
      width: auto;
      font-size: 0.5em;
      line-height: 0.5em;
      margin: 0 0.25em;
    }
    liquid-diagram input[type="range"] {
      flex: 1;
    }

  </style>

<p><label for="def-help" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-help" class="margin-toggle" />
<span class="marginnote">
You can yog through the different states of the diagram using the arrow buttons ⬅ ➡ or the slider.<br />
With the ✏️  button you can view <strong>and</strong> update the source of the diagram.
</span></p>

<figure>
<liquid-diagram style="width: 100%; display: block">
add "A"
  pos 0 -35
  size 20 15
add "B"
  pos -35 5
  size 20 15
add "C"
  pos 20 35
  size 20 15
|- m1 -|
connect "A" "B" "First"
|- - -|
connect "B" "C" "Second"
|- closing the loop -|
connect "C" "A" "Third"
|- dance! -|
update "C"
  pos 0 -35
update "A"
  pos -35 5
update "B"
  pos 20 35
</liquid-diagram>
</figure>

<h3 id="-aktuellen-lösungsansätze-und-ihre-grenzen"><a name="solutions"></a> Aktuellen Lösungsansätze und ihre Grenzen</h3>

<p>Derzeit gibt es einige Ansätze, um diese Probleme zu lösen:</p>

<ol>
  <li>
    <p><strong>Mehrere statische Bilder</strong>: Es ist üblich, sich entwickelnde Diagramme in
mehrere statische Bilder aufzuteilen. Diese Methode kann jedoch umständlich
sein, da sie den Leser zwingt, nach oben und unten zu scrollen, um auf die
verschiedenen Stufen des Diagramms zu verweisen.</p>
  </li>
  <li>
    <p><strong>Video-Format</strong>: Die Verwendung von Videos zur Animation von Diagrammen verleiht
diesen einen dynamischen Aspekt, der es leichter macht, Veränderungen im Laufe
der Zeit zu verstehen. Die Videoproduktion erfordert jedoch besondere
Fähigkeiten und führt oft zu großen Dateien, was für eine schnell ladende
Webdokumentation nicht ideal ist.</p>
  </li>
  <li>
    <p><strong>SVG-Animationen</strong>: SVG, kombiniert mit CSS- und JS-Animationen, ist eine weitere
Methode zur Erstellung dynamischer Diagramme. Dieser Ansatz ist zwar
vielversprechend, erfordert aber vom Autor jedoch spezielle
Fähigkeiten und potenziell teure Tools.</p>
  </li>
</ol>

<h3 id="-eine-neue-einfache-sprache-für-interaktive-diagramme"><a name="liquid"></a> Eine neue, einfache Sprache für interaktive Diagramme</h3>

<p>Ich persönlich war schon immer ein Fan von MermaidJS. Wie viele Entwickler
schätze ich die Tatsache, dass textbasierte Diagrammgeneratoren einen Großteil
der Komplexität wegnehmen, die mit visuellen Tools wie <a href="https://inkscape.org">Inkscape</a> oder
<a href="https://app.diagrams.net">diagrams.net</a> verbunden ist.</p>

<p>Textbasierte tools wie MermaidJS, werden wegen
ihrer Einfachheit und Effektivität sehr geschätzt. Der eigentliche Charme liegt
in ihrer Fähigkeit, kurzen, prägnanten Text in ausgefeilte Diagramme zu
verwandeln. Dieser textuelle Ansatz erleichtert nicht nur die Erstellung von
Diagrammen, sondern lässt sich auch nahtlos in Versionskontrollsysteme
integrieren, so dass eine klare Semantik über mehrere Übertragungen hinweg
erhalten bleibt.
Wenn deine Dokumentation in Form von Markdown Dokumenten bei Github liegt kannst du 
<a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">Diagramme direkt einbinden</a> 
ohne weitere Werkzeuge zu benötigen.</p>

<p>Wenn ich ein Diagramm erstellen will, brauche ich meistens nur ein paar
Kästchen, die durch Pfeile verbunden sind. Ich habe mich jedoch immer nach
einer Möglichkeit gesehnt, mit meinen Diagrammen eine Geschichte zu erzählen,
Ich möchte Elemente wie Kästchen und Pfeile gerne <strong>nach und nach</strong> einzuführen, anstatt alles auf
einmal zu präsentieren. Das hat mich dazu veranlasst, eine neue Sprache und
eine Webkomponente zu entwickeln, mit der genau das möglich ist. 
Mit meinem Tool kann ich meine Erzählung langsam aufbauen, indem ich dem Diagramm
Schritt für Schritt Elemente hinzufüge und so die komplexen Informationen
verständlicher und ansprechender machen kann.</p>

<p>Wenn du interaktive Diagramme auf deiner Seite haben möchtest <a href="/assets/js/liquid-diagrams.js">lade die Webkomponente runter</a>.
Binde sie <strong>am Ende</strong> deiner Seite ein <strong>nachdem</strong> du die <code class="language-plaintext highlighter-rouge">liquid-diagram</code> Elemente speyifiziert hast.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;liquid-diagram</span> <span class="na">style=</span><span class="s">"display: block"</span><span class="nt">&gt;</span>
add "A"
  pos -10 -7
  size 20 15
add "B"
  pos -35 -35
  size 20 15
|- then -|
connect "A" "B" "A to B"
<span class="nt">&lt;/liquid-diagram&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/liquid-diagrams.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>

<figure>
<liquid-diagram style="display: block">
add "client1"
  pos -30 -35
  size 15 10
|- m1 -|
add "load-balancer"
  pos -10 -5
  size 25 10
add "app-server1"
  pos -30 15
  size 25 10
add "app-server2"
  pos 20 15
  size 25 10
add "db"
  pos -10 35
  size 25 10
|- m2 -|
connect "client1" "load-balancer"
|- m3 -|
connect "load-balancer" "app-server1"
connect "app-server1" "db"
|- m3 -|
add "client2"
  pos 10 -35
  size 15 10
|- m4 -|
connect "client2" "load-balancer"
connect "load-balancer" "app-server2"
connect "app-server2" "db"
</liquid-diagram>
</figure>

<script src="/assets/js/liquid-diagrams.js"></script>]]></content><author><name></name></author><category term="diagrams" /><category term="visualization" /><category term="documentation" /><summary type="html"><![CDATA[Statische Bilder, Videos und SVG-Animationen bringen jeweils ihre eigenen Herausforderungen mit sich, wenn es darum geht komplexe Systeme durch Diagramme zu visualisieren. Ich habe eine Minisprache und eine Webkomponente entwickelt, um Diagrammen ein erzählerisches Element hinzuzufügen.]]></summary></entry><entry xml:lang="de"><title type="html">htmx vs. SPA</title><link href="https://blog.axelerator.de/development/de/htmx-vs-spa" rel="alternate" type="text/html" title="htmx vs. SPA" /><published>2023-11-05T17:00:00-05:00</published><updated>2023-11-05T17:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/htmx-vs-spa-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/htmx-vs-spa"><![CDATA[<p><img src="/assets/posts/htmx-vs-spa/scientist_caveman.jpg" width="130" style="float:left; margin: 5px 10px 10px 0" />
Als Webentwickler liegt es in unserer Verantwortung, das beste Werkzeug für die
jeweilige Aufgabe zu finden. htmx vereinfacht in der Tat den technischen Stack
und senkt die Einstiegshürde für angehende Entwickler oder einfachere Projekte.
Für komplizierte Benutzeroberflächen, die eine konsistente Darstellung der Daten
erfordern, bietet der SPA-Ansatz jedoch eine bessere Unterstützung. Anstatt
sich von Trends beeinflussen zu lassen, sollten wir die
Nuancen in diesen Diskussionen anerkennen und unsere Tools mit Bedacht auswählen.</p>

<hr />

<p>Inhalt:</p>

<ul>
  <li><a href="#hype">Der htmx Hype</a></li>
  <li><a href="#simplicity"><em>Einfach</em> ist realtive</a></li>
  <li><a href="#tool">Das passende Werkzeug für den Job </a></li>
</ul>

<hr />

<p><label for="def-spa" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-spa" class="margin-toggle" />
<span class="marginnote">
Eine <a href="https://en.wikipedia.org/wiki/Single-page_application">single-page application (SPA)</a>
wird eine Webanwendung bezeichnet, die aus einem einzigen HTML-Dokument besteht und deren Inhalte dynamisch nachgeladen werden.
</span></p>

<p>Die Technologielandschaft entwickelt sich ständig weiter, und im Bereich der
Webentwicklung hat in letzter Zeit nichts mehr Aufsehen erregt als <em>htmx</em>. Als
Webentwickler erleben wir kontinuierliech, wie eine Vielzahl von Technologien und
Praktiken ins Rampenlicht gerückt wurden, nur um dann wieder in der Versenkung zu
verschwinden, wenn etwas Besseres auftaucht. Der derzeitige Hype um htmx ist
ein Beleg für diesen Zyklus, und viele loben seine Fähigkeit, den Prozess der
Erstellung interaktiver HTML-Seiten zu vereinfachen. Aber wie bei allen
technischen Diskussionen ist es wichtig zu differenzieren, besonders
wenn man htmx mit Single Page Applications (SPAs) vergleicht.</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 50%" /><br />
<a href="https://htmx.org/docs/">htmx</a> ist eine JavaScript Bibliothek die es, erlaubt
moderne Browserfunktionen direkt von HTML aus zuzugreifen, anstatt Javascript
zu verwenden.
</span></p>

<h3 id="-der-htmx-hype"><a name="htmx"></a> Der htmx hype</h3>

<p>htmx bietet einen erfrischenden Ansatz für die Entwicklung von Webanwendungen.
Es bringt eine nachweisliche Einfachheit in den Tech-Stack, reduziert den Bedarf an
mehreren Sprachen und eliminiert bestimmte Build-Tools. Diese messbare
Einfachheit spricht Entwickler an, die einen geradlinigen Ansatz für
interaktive Webseiten suchen.</p>

<p>Allerdings hat der Aufstieg von htmx auch eine Welle der Kritik an SPAs
ausgelöst, die sie als zu kompliziert und schwerfällig darstellen. Es ist
jedoch wichtig anzuerkennen, dass Einfachheit nicht universell ist; was in einem
Kontext einfach ist, kann in einem anderen komplex sein.</p>

<h3 id="-einfach-ist-relativ"><a name="simplicity"></a> <em>Einfach</em> ist relativ</h3>

<p>Während htmx für die Einfachheit des technischen Stacks optimiert, setzen SPAs
auf eine andere Art von Einfachheit - die Einfachheit des UI-Zustnadnds-Managements.</p>

<p>Die <a href="https://guide.elm-lang.org/architecture/">Elm-Architektur</a> 
beispielsweise gewährleistet eine klare Ableitung der
Darstellung aus einer einzigen Datenquelle. Ein solches Setup hilft bei der
konsistenten Widerspiegelung von Daten in der gesamten Benutzeroberfläche.</p>

<p>Ich bin mir sicher, dass Du auch auf größeren Webplattformen schon einmal auf
den folgenden Fehler gestoßen sind:</p>

<p>In der oberen rechten Ecke befindet sich ein Zähler, der die Anzahl der
ungelesenen Nachrichten anzeigt. Du folgst einem Link zu einer ungelesenen
Nachricht, nur nicht über genau diesen Zähler. Nun wird dieser Zähler aber nur
dann aktualisiert, wenn die gesamte Seite neu geladen wird.</p>

<p>Mit einem dedizierten Datenmodell für die Benutzeroberfläche steigt das
Vertrauen Benutzeroberflächen bauen zu können, die konsistent genaue
Daten wiedergeben.</p>

<p>Das soll nicht heißen, dass SPAs eine Garantie für fehlerfreie
Benutzeroberflächen sind, aber die grundlegende Architektur bietet Entwicklern
einen robusteren Rahmen, um die Konsistenz der Benutzeroberfläche zu
gewährleisten.</p>

<h3 id="-das-richtige-werkzeug-für-die-aufgabe"><a name="tool"></a> Das richtige Werkzeug für die Aufgabe</h3>

<p>Bei der Diskussion zwischen htmx und SPA sollte es nicht darum gehen, welches
Tool <em>“auf der Welt”</em> ist, sondern darum, die Stärken und Grenzen der beiden zu
verstehen.
htmx setzt eine niedrigere Einstiegshürde für diejenigen, die mit
einfachen Webanwendungen beginnen wollen. Es eignet sich hervorragend für Projekte, die
weniger komplizierte Benutzeroberflächen erfordern, wie zum Beispiel ein einfaches
Anmeldeformular für einen Newsletter.
Für komplexe, interaktive Benutzeroberflächen, bei denen eine konsistente Datendarstellung entscheidend
ist, bietet der SPA-Ansatz, insbesondere mit Frameworks wie Elm, eine zuverlässigere Struktur.</p>

<p>Die häufigste Kritik an SPAs is wie <em>kompliziert</em> sie sind. In dem foglenden Video zeige
ich wie man inerhalb weniger Minuten ein SPA setup aufsetzen kann, ganz ohne <em>NPM</em>, <em>Webpack</em>
und eigentlich sogar ohne JavaScript.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/xLUpTaI1oE0?si=M0CGBqFvMQOOMzoy" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="webdevelopment" /><category term="htmx" /><category term="spa" /><category term="elm" /><summary type="html"><![CDATA[Als Webentwickler liegt es in unserer Verantwortung, das beste Werkzeug für die jeweilige Aufgabe zu finden. htmx vereinfacht in der Tat den technischen Stack und senkt die Einstiegshürde für angehende Entwickler oder einfachere Projekte. Für komplizierte Benutzeroberflächen, die eine konsistente Darstellung der Daten erfordern, bietet der SPA-Ansatz jedoch eine bessere Unterstützung. Anstatt sich von Trends beeinflussen zu lassen, sollten wir die Nuancen in diesen Diskussionen anerkennen und unsere Tools mit Bedacht auswählen.]]></summary></entry><entry xml:lang="en"><title type="html">htmx vs. SPA</title><link href="https://blog.axelerator.de/development/en/htmx-vs-spa" rel="alternate" type="text/html" title="htmx vs. SPA" /><published>2023-11-05T17:00:00-05:00</published><updated>2023-11-05T17:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/htmx-vs-spa-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/htmx-vs-spa"><![CDATA[<p><img src="/assets/posts/htmx-vs-spa/scientist_caveman.jpg" width="130" height="130" style="float:left; margin: 5px 10px 10px 0" />
As web developers, it’s our responsibility to discern the best tool for the
job. htmx indeed simplifies the tech stack and lowers the entry barrier for
budding developers or simpler projects. However, for intricate UIs that demand
consistent data representation, the SPA approach offers better support. Rather
than getting swayed by trends, it’s time we appreciated the nuance in these
discussions and chose our tools wisely.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#hype">The htmx hype</a></li>
  <li><a href="#simplicity">Simplicity is relative</a></li>
  <li><a href="#tool">The Right Tool for the Job</a></li>
</ul>

<hr />

<p><label for="def-spa" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-spa" class="margin-toggle" />
<span class="marginnote">
A <a href="https://en.wikipedia.org/wiki/Single-page_application">single-page application (SPA)</a> is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages.
</span></p>

<p>The technology landscape is ever-evolving, and in the realm of web development,
nothing has generated more buzz recently than <strong>htmx</strong>. As web developers, we’ve
seen a myriad of technologies and practices come into the spotlight, only to
fade into obscurity when something better comes along. The current fanfare
around htmx is testament to this cycle, with many praising its ability to
simplify the process of crafting interactive HTML pages. But as with all tech
discussions, it’s crucial to introduce some nuance, especially when comparing
htmx to  Single Page Applications (SPAs).</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 50%" /><br />
<a href="https://htmx.org/docs/">htmx</a> is a library that allows you to access modern browser features directly from HTML, rather than using javascript.
</span></p>

<h3 id="-the-htmx-hype"><a name="htmx"></a> The htmx Hype</h3>

<p>htmx offers a refreshing take on web app development. It brings in a tangible
simplicity to the tech stack, reducing the need for multiple languages and
eliminating certain build tools. This is a measurable simplicity that appeals
to developers who want a straightforward approach to interactive web
components.</p>

<p>That said, the rise of htmx has also ushered in a wave of criticism towards
SPAs, painting them as overcomplicated and cumbersome. But it’s essential to
recognize that simplicity isn’t universal; what’s simple in one context might
be complex in another.</p>

<h3 id="-simplicity-is-relative"><a name="simplicity"></a> Simplicity is relative</h3>

<p>While htmx champions the simplicity of the tech stack, SPAs champion a 
different kind of simplicity - the simplicity of UI state management.</p>

<p>The <a href="https://guide.elm-lang.org/architecture/">Elm architecture</a>, for instance, ensures a clear derivation of UI state from
<strong>a single data source</strong>. Such a setup helps with consistent reflection of data across
the user interface.</p>

<p>I’m sure you’ve run into the following bug on even bigger web platforms:</p>

<p>In the top-right corner there is a counters that displays the number of unread messages. 
You’re following a link to an unread message, just not through that very counter.
But now that counter fails to update unless the whole page is refreshed.</p>

<p>With a dedicated data model for the UI, there’s a heightened confidence in producing user interfaces that
consistently reflect accurate data.</p>

<p>Now, this isn’t to say that SPAs guarantee flawless UIs, but the foundational
architecture gives developers a more robust framework to ensure UI consistency.</p>

<h3 id="-the-right-tool-for-the-job"><a name="tool"></a> The Right Tool for the Job</h3>

<p>The discussion between htmx and SPA shouldn’t be about which is universally
better; it should be about understanding the strengths and limitations of each.
htmx sets a lower entry barrier for those looking to get started with web apps.
It’s brilliant for projects that require less intricate user interfaces, like a
simple signup form for a newsletter.</p>

<p>On the other hand, for complex, interactive UIs where consistent data
representation is crucial, the SPA approach, especially with frameworks like
Elm, offers a more reliable structure.</p>

<p>The most common criticism of SPAs is how complicated they are to work with. 
In the following video I show how you can set up an SPA setup within a few minutes, 
without the usage of NPM, Webpack and actually even without JavaScript.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/xLUpTaI1oE0?si=M0CGBqFvMQOOMzoy" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="webdevelopment" /><category term="htmx" /><category term="spa" /><category term="elm" /><summary type="html"><![CDATA[As web developers, it’s our responsibility to discern the best tool for the job. htmx indeed simplifies the tech stack and lowers the entry barrier for budding developers or simpler projects. However, for intricate UIs that demand consistent data representation, the SPA approach offers better support. Rather than getting swayed by trends, it’s time we appreciated the nuance in these discussions and chose our tools wisely.]]></summary></entry><entry xml:lang="en"><title type="html">Building in the open</title><link href="https://blog.axelerator.de/business/en/building-in-the-open" rel="alternate" type="text/html" title="Building in the open" /><published>2023-10-19T18:00:00-04:00</published><updated>2023-10-19T18:00:00-04:00</updated><id>https://blog.axelerator.de/business/en/building-in-the-open-en</id><content type="html" xml:base="https://blog.axelerator.de/business/en/building-in-the-open"><![CDATA[<p><img src="/assets/posts/building-in-the-open/features.svg" width="130" height="130" style="float:right; margin: 5px 10px 10px 0" />
Join me as I embark on a transparent journey to develop a digital filing cabinet that prioritizes your privacy.
Using my years of experience in web development, I aim to craft a solution that bridges the gap between convenience and data security, 
all while sharing each step of the process with you. 
Follow along for live coding sessions, insights, and the chance to shape a product designed for individuals, families, and SMEs alike.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#who">Who is this for?</a></li>
  <li><a href="#usp">This is what I’m building</a></li>
  <li><a href="#building">If you build it, <del>they will come</del> nobody cares</a></li>
</ul>

<hr />

<p><a name="intro"></a></p>

<p>I started web development in the last millennium with the help of a website called 
<label for="selfhtml" class="margin-toggle">⊕</label>
<input type="checkbox" id="selfhtml" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/selfhtml.jpg" alt="Selfhtml.de in 1998" /><br />
    Screenshot of SelfHtml.de from 1998 taken with the 
    <a href="https://web.archive.org/web/20000915151937/http://www.netzwelt.com/selfhtml/tcab.htm">WaybackMachine</a>
</span>
 <a href="https://wiki.selfhtml.org/">SELFHTML</a></p>

<p>I ran my own <a href="https://www.fortytools.com/">software company</a> with two friends in Germany for nearly a decade. 
And then, five years ago, after I moved to Canada to work for Shopify.
I’m currently enjoying some free time between jobs and want to use these months to 
spin up a product/business as a solo entrepreneur with an idea I’ve been thinking about for nearly ten years.</p>

<p>Here is the problem I want to solve with my software:</p>

<p><label for="unread" class="margin-toggle">⊕</label>
<input type="checkbox" id="unread" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/unread.svg" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" />
</span></p>

<blockquote>
  <p>You get a notification about an new e-mail. You open it and at a glance you can tell it’s important and have to <strong>act</strong> on it.</p>

  <p>But you don’t have the time to do it <strong>right now</strong>.</p>

  <p>So you leave it marked as <em>unread</em>.</p>
</blockquote>

<p>I do this with physical mail too – And it is a nightmare. I end up with stacks of unopened letters scattered through my apartment. Some of them urgent, some of them
important, some of them both, some of them none of it.</p>

<p>And then comes the dreaded moment where I have to find that <strong>one letter</strong>.</p>

<p>I never committed to an existing software because these days this most likely means I have to give a very complete 
picture of my personal life. Additionally</p>

<ul>
  <li>I can only maintain access to my data as long as I pay them a monthly fee</li>
  <li>They will potentially use/sell my data</li>
  <li>They might give generous access to government(s) agencies</li>
  <li>Might be accessed by third parties through a data leak</li>
</ul>

<p>While there are alternatives like <em>Paperless</em> <label for="paperless" class="margin-toggle">⊕</label>
<input type="checkbox" id="paperless" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/paperless.png" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" /><br />
    <a href="https://github.com/paperless-ngx/paperless-ngx">Paperless</a> is a self hosted open-source document management system.
</span>
 it is only accessible to people who are already well versed in
hosting their own servers.</p>

<p>I want to solve this problem for myself as well as non-technical people. Hitting the right spot between ease-of-use, level of privacy and cost to operate is 
always an trade off based on ones current situation. Knowing this I will be building a software that allows users to choose a compromise that suits <em>their</em> needs
and change their mind over time.</p>

<h3 id="-who-is-this-for"><a name="who"></a> Who is this for?</h3>

<p>I’ve talked to a lot of friends and family and a lot of people struggle with <em>document management</em> in similar ways. Not surprisingly the amount of important 
mail multiplies once you start a family and you receive documents that you have to manage on behalf of your children.</p>

<p>So while the <em>MVP</em> <label for="mvp-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="mvp-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Minimum_viable_product" title="Check out the definition on Wikipedia">MVP</a> stands for <em>“Minimum Viable Product”</em>
</span>
 that I will build in the beginning
will focus on individuals a <strong>multiuser</strong> concept will be part of the foundations software design.</p>

<p>To some degree a solution of this problem could be even applied to SMEs <label for="sme-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="sme-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Small_and_medium-sized_enterprises" title="Check out the definition on Wikipedia">SME</a> stands for <em>“Small and medium-sized enterprises”</em>
</span>
.
For example at Fortytools we were between 15-20 people and had a lot going on between our own SaaS and our contracting business. We had enough <em>paperwork</em> to deal
with to employ someone. And documents often had to retrieved, processed and shared with other users.</p>

<h3 id="-this-is-what-im-building"><a name="usp"></a> This is what I’m building</h3>

<p>The core of the software I am going to build can best be described as a digital filing cabinet. That in itself is not especially novel, but I was surprised at
how few solutions there are that do not satisfy my personal requirements for such a solution.</p>

<p><em>“Data privacy”</em> is the least interesting feature in any software until someone 
gets access to you data who is not supposed to. Which happens a lot more often than you think!</p>

<p><img src="/assets/posts/building-in-the-open/breaches23.svg" alt="data breaches" /></p>

<p>Giving your data to a <em>SaaS</em> <label for="saas-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="saas-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a> Software as a service is a software licensing and delivery model in which software is licensed on a subscription basis and is centrally hosted.
</span>
 provider is certainly the most convenient. It’s also arguably likely to loose your data when you rely
on the backup tools of a cloud provider than managing external disks and thumb drives.</p>

<p>However not all SaaS providers are set up equally and there are a lot of data breaches each year. Larger companies are usually good
at protecting your data against unauthorized access. However if your are <em>not</em> paying a significant price tag, for example for Google Drive,
the provider will use your data in one way or another to monetize their project. Yes they will look <strong>into</strong> files. If you create
a comparison Google Sheet for Baby strollers, you <strong>will</strong> get ads of baby products.</p>

<p>So I want to make <strong>privacy</strong> a major concern and allow you to run the software without any connection to the internet.
<strong>But</strong> I also want to make the software as easily accessible as possible.
So I will launch the software in different <em>variants</em> that allows you to pick your sweet sweet spot between <em>privacy</em> and <em>comfort</em>.</p>
<div id="variants"></div>

<p>And most importantly I will make it <strong>easy to switch</strong> between these. One of the main technical ingredients to achieve this is to store
everything in <em>files</em>. Documents will be stored <em>by year</em> and <em>by month</em>. An extremely simple scheme that will be manageable even if you
stop using the software altogether.</p>

<div id="features"></div>

<h3 id="-if-you-build-it-they-will-come-nobody-cares"><a name="building"></a> If you build it, <del>they will come</del> nobody cares</h3>

<p>There is this platitude about how it’s not enough to just build a good product.
The gist is that you should start starting marketing &amp; sales activities as soon as you start building.</p>

<p>And the reason this is still being told is that especially solo developers are likely to fall into this trap.
There is a high temptation wanting the first release to be perfect, wanting to add just one more feature..
Another catalyst for this line of thinking/feeling is that it’s better to start with a “big bang”.</p>

<p>It’s been proven over and over again that this is <strong>not</strong> the case.
So to avoid falling into this trap I decided to <strong>“build in the open”</strong> from the start.</p>

<p>Practically that means I’m going to stream live on Twitch as I write the first lines of code.
I’ll be happy to answer questions and will be talking in more detail about some of technical
decisions for this project.</p>

<p>Watching live coding sessions is not always most captivating and I also want to share non-technical challenges
along the way. So I will also build other channels (more blog posts Instagram, Youtube, Podcast, Newsletter). I’m also 
interested in learning from other peoples journey.</p>

<p>So if you’re interested in following my journey I’d love to send you my weekly newsletter where I share recent progress.</p>

<div id="subscribe"></div>

<link rel="stylesheet" href="/assets/interactive/styles.css" />

<script src="/assets/interactive/interactive.js"></script>

<script>
  var variants = Elm.Interactive.init({
    node: document.getElementById('variants'),
    flags: { kind: "Variants", lang: "en" }
  });

  var features = Elm.Interactive.init({
    node: document.getElementById('features'),
    flags: { kind: "Features" , lang: "en" }
  });

  var subscribe = Elm.Interactive.init({
    node: document.getElementById('subscribe'),
    flags: { kind: "Subscribe" }
  });
</script>]]></content><author><name></name></author><category term="solopreneur" /><category term="business" /><summary type="html"><![CDATA[Join me as I embark on a transparent journey to develop a digital filing cabinet that prioritizes your privacy. Using my years of experience in web development, I aim to craft a solution that bridges the gap between convenience and data security, all while sharing each step of the process with you. Follow along for live coding sessions, insights, and the chance to shape a product designed for individuals, families, and SMEs alike.]]></summary></entry><entry xml:lang="de"><title type="html">Bauen im Freien</title><link href="https://blog.axelerator.de/business/de/building-in-the-open" rel="alternate" type="text/html" title="Bauen im Freien" /><published>2023-10-19T18:00:00-04:00</published><updated>2023-10-19T18:00:00-04:00</updated><id>https://blog.axelerator.de/business/de/building-in-the-open-de</id><content type="html" xml:base="https://blog.axelerator.de/business/de/building-in-the-open"><![CDATA[<p><img src="/assets/posts/building-in-the-open/features.svg" width="130" height="130" style="float:right; margin: 5px 10px 10px 0" />
Begleite mich wie ich meinen <em>digitalen Aktenschrank</em> und mein 1-Mann-Startup darum in der Öffentlichkeit baue.
Mit langjähriged Erfahrungen in der Softwareentwicklung strebe ich an, eine Lösung zu schaffen, die die Lücke zwischen Bequemlichkeit und Datensicherheit schließt,
während ich jeden Schritt des Prozesses mit Dir teile.</p>

<p>Verfolge Livecoding Sessions, Erkenntnisse und die Möglichkeit, ein Produkt mitzugestalten, das für Einzelpersonen,
Familien und KMUs gleichermaßen konzipiert ist.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#who">Für wen?</a></li>
  <li><a href="#usp">Das wird gebaut</a></li>
  <li><a href="#building">If you build it, <del>they will come</del> nobody cares</a></li>
</ul>

<hr />

<p><a name="intro"></a></p>

<p>Ich habe mit der Webentwicklung im letzten Jahrtausend begonnen,
und zwar mit Hilfe einer Website namens <label for="selfhtml" class="margin-toggle">⊕</label>
<input type="checkbox" id="selfhtml" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/selfhtml.jpg" alt="Selfhtml.de in 1998" /><br />
    Screenshot of SelfHtml.de from 1998 taken with the 
    <a href="https://web.archive.org/web/20000915151937/http://www.netzwelt.com/selfhtml/tcab.htm">WaybackMachine</a>
</span>
 <a href="https://wiki.selfhtml.org/">SELFHTML</a> im Jahr 1998.</p>

<p>Fast ein Jahrzehnt lang habe ich in Deutschland gemeinsam mit zwei Freunden mein eigenes <a href="(https://www.fortytools.com/)">Softwareunternehmen</a> geführt.
Vor fünf Jahren bin ich dann nach Kanada gezogen, 
um bei Shopify zu arbeiten. 
Derzeit genieße ich etwas Freizeit zwischen den Jobs und möchte diese Monate nutzen,
um als Solo-Unternehmer ein Produkt/Geschäft aufzubauen - eine Idee, über die ich seit fast zehn Jahren nachdenke.</p>

<p>Hier ist das Problem, das ich mit meiner Software lösen möchte:</p>

<p><label for="unread" class="margin-toggle">⊕</label>
<input type="checkbox" id="unread" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/unread.svg" style="width: 5em" alt="Mail logo mit einer hohen Anzahl ungelesener E-Mails" />
</span></p>

<blockquote>
  <p>De bekommst eine Benachrichtigung über eine neue E-Mail. Du öffnest sie und erkennst sofort, 
dass sie wichtig ist und Du darauf reagieren musst.</p>

  <p>Aber Du hast jetzt keine Zeit dafür.</p>

  <p>Also läst Du sie als ungelesen markiert.</p>
</blockquote>

<p>Mir geht es mit physischer Post genauso – und es ist ein Albtraum. 
Ich habe Stapel ungeöffneter Briefe in meiner Wohnung.
Einige davon sind dringend, andere wichtig, manche beides, manche keins von beidem.</p>

<p>Und dann kommt der gefürchtete Moment, in dem ich diesen <strong>einen</strong> Brief finden muss.</p>

<p>Ich konnte mich nie für eine bestehende Software entscheiden, 
weil dies heutzutage höchstwahrscheinlich bedeutet, dass ich einem Cloud-Software-Anbieter 
ein sehr vollständiges Bild meines persönlichen Lebens geben muss.</p>

<p>Dazu kommt:</p>

<ul>
  <li>ich muss einen monatlichen Beitrag zahlen um weiter auf meine Daten zugreifen zu können</li>
  <li>der Anbieter verkauft Teile meiner Daten für zusätzlichen Profit</li>
  <li>der Anbieter teilt Daten großzügig mit Behörden im In- und Ausland</li>
  <li>der Anbieter wird Ziel eines Hackerangriffs und meine Daten gelangen in die Hände Unbefugter</li>
</ul>

<p>While there are alternatives like <em>Paperless</em>  it is only accessible to people who are already well versed in
hosting their own servers.</p>

<p>Es gibt zwar Open-Source Alternativen wie <label for="paperless" class="margin-toggle">⊕</label>
<input type="checkbox" id="paperless" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/paperless.png" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" /><br />
    <a href="https://github.com/paperless-ngx/paperless-ngx">Paperless</a> ist eine selbst gehostete Dokumenten Management Lösung.
</span>
 <em>Paperless</em>,
diese sind aber häufig nur für Leute zugänglich die sich im Betrieb von Server auskennen.</p>

<p>Ich möchte dieses Problem für mich selbst sowie für technisch weniger versierte Personen lösen.
Es ist immer ein Kompromiss zwischen Benutzerfreundlichkeit, Datenschutz und Betriebskosten. 
Mein Ziel ist es eine Software entwickeln, die es den Benutzern ermöglicht, einen Kompromiss zu wählen,
der ihren Bedürfnissen entspricht, und im Laufe der Zeit ihre Meinung zu ändern.</p>

<h3 id="-für-wen"><a name="who"></a> Für wen?</h3>

<p>Ich habe mit vielen Freunden und Familienmitgliedern gesprochen,
und die meisten haben ähnliche Probleme mit der Dokumentenverwaltung.
Und sobald man eine Familie gründet kommt eine Menge an wichtiger Post steigt,
, die man im Namen seiner Kinder verwalten muss dazu.</p>

<p>Der <label for="mvp-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="mvp-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://de.wikipedia.org/wiki/Minimum_Viable_Product">MVP</a> steht für <em>“Minimum Viable Product”</em>
</span>
 MVP, den ich zu Beginn entwickeln werde,
wird sich also auf Einzelpersonen konzentrieren, aber ein Multiuser-Konzept wird Teil des Software-Designs sein.</p>

<p>In gewissem Maße könnte eine Lösung dieses Problems sogar auf <label for="sme-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="sme-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://de.wikipedia.org/wiki/Kleine_und_mittlere_Unternehmen">KMU</a> steht für r <em>“Kleine und mittlere Unternehmen”</em>
</span>
KMU angewendet werden.
Zum Beispiel waren wir bei Fortytools zwischen 15-20 Personen und hatten mit unserem 
eigenen Produkt und Entwicklungsarbeit für andere Unternehmen viel zu tun. 
Wir hatten genug Papierkram zu erledigen, um jemanden einzustellen. 
Dokumente mussten oft abgerufen, verarbeitet und mit anderen Benutzern geteilt werden.</p>

<h3 id="-this-is-what-im-building"><a name="usp"></a> This is what I’m building</h3>

<p>Das Herzstück der Software, die ich entwickeln werde,
lässt sich am besten als digitales Aktenschrank beschreiben.
Das ist an sich nichts Neues, aber ich war überrascht,
wie wenige Lösungen es gibt, die meinen persönlichen Anforderungen an eine solche Lösung nicht gerecht werden.</p>

<p>“Datenschutz” ist ein Feature in jeder Software, aber normalerweise nicht eines über das irgendjemand aufgeregt ist.</p>

<p>Bis jemand Zugriff auf Daten erhält, der das nicht sollte. 
Und das passiert viel häufiger, als man denkt!</p>

<p><img src="/assets/posts/building-in-the-open/breaches23.svg" alt="Datatenpannen 2023" /></p>

<p>Deine Daten einem SaaS <label for="saas-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="saas-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a> Software und die bei einem externen IT-Dienstleister betrieben und vom Kunden als Dienstleistung genutzt werden kann.
</span>
 Anbieter zu geben, ist sicherlich am bequemsten.
Dort sind sie vermutlich auch besser gegen Verlust geschützt als sich auf manuelle Backups zu verlassen.</p>

<p>Allerdings sind nicht alle SaaS-Anbieter gleich aufgestellt und es gibt jedes Jahr viele Datenverletzungen. 
Größere Unternehmen sind in der Regel gut darin, Ihre Daten vor unbefugtem Zugriff zu schützen. 
Bei günstigen Lösungen, zum Beispiel Google Drive, wird der Anbieter Deine Daten auf die eine oder andere Weise nutzen, 
um ihr Projekt zu monetarisieren. Ja, sie werden in Deine Dateien schauen. 
Wenn Du zum Beispiel eine Tabelle in Google Sheets zum Vergleich für Kinderwagen hast, 
wurst Du in den nächsten Tagen Werbung für Babyprodukte erhalten.</p>

<p>Ich werde in meiner Lösung den Datenschutz zu einem zentralen Anliegen machen und 
es ermöglichen, die Software ohne jegliche Internetverbindung zu betreiben.</p>

<p>Aber ich möchte auch, dass die Software so zugänglich wie möglich ist. 
Daher werde ich die Software in verschiedenen Varianten anbieten, die es ermöglichen, 
den perfekten Mittelweg zwischen Datenschutz und Komfort zu wählen.</p>

<div id="variants"></div>

<p>Am wichtigsten für dieses Modell ist, dass es <strong>einfach</strong> ist zwischen diesen <strong>Varianten zu wechseln</strong>.
Der Kernidee dieses zu ermöglichen ist alle Informationen in einfachen Dateien zu speichern anstatt auf 
eine Datenbank zu setzen.</p>

<p>Diese Dateien werden nach einem einfachen Schema (Jahr/Monat) in Ordern abgelegt. Diese ermöglichtes Dokumente
wiederzufinden selbst wenn man aufgehört hat meine Anwendung zu benutzen.</p>

<div id="features"></div>

<h3 id="-if-you-build-it-they-will-come-nobody-cares"><a name="building"></a> If you build it, <del>they will come</del> nobody cares</h3>

<p>Heißt so viel wie</p>

<blockquote>
  <p>Wenn du es baust,
<del>werden sie schon kommen</del></p>

  <p>interessiert es kein Schwein.</p>
</blockquote>

<p>Es spiegelt die, besonderns bei Entwicklern verbreitete, Idee wider, dass man lediglich ein gutes Produkt bauen muss und es
sich dann schon rumspricht. Eine anderer Versuchung ist es das Produkt vor der Veröffentlichung zu perfektionieren, um
mit einem <em>“Big Bang”</em> zu starten.</p>

<p>Die Realität ist aber, dass das für die Mehrheit der digitalen Produkte nicht ausreicht. 
Deswegen habe ich beschlossen meine Produkt von Anfang an ind der Öffentlichkeit zu bauen.</p>

<p>Praktisch heißt das, dass ich regelmäßig live auf Twitch programmieren und dabei gerne auch Fragen beantworten werde. 
Aber da das für viele nicht besonder spannend ist werde ich auch noch andere Wege erforschen meine Erfahrungen
im Aufbau dieses Ein-Mann-Unternehmens zu teilen (mehr Blog-Artikel, Instragram, Youtube, Podcasts?).</p>

<p>Falls sich das für dich spannend anhört freue ich mich wenn du dich für meinen wöchentlichen Newsletter einträgst.</p>

<div id="subscribe"></div>

<link rel="stylesheet" href="/assets/interactive/styles.css" />

<script src="/assets/interactive/interactive.js"></script>

<script>
  var variants = Elm.Interactive.init({
    node: document.getElementById('variants'),
    flags: { kind: "Variants", lang: "de" }
  });

  var features = Elm.Interactive.init({
    node: document.getElementById('features'),
    flags: { kind: "Features", lang: "de"  }
  });

  var subscribe = Elm.Interactive.init({
    node: document.getElementById('subscribe'),
    flags: { kind: "Subscribe" }
  });
</script>]]></content><author><name></name></author><summary type="html"><![CDATA[Begleite mich wie ich meinen digitalen Aktenschrank und mein 1-Mann-Startup darum in der Öffentlichkeit baue. Mit langjähriged Erfahrungen in der Softwareentwicklung strebe ich an, eine Lösung zu schaffen, die die Lücke zwischen Bequemlichkeit und Datensicherheit schließt, während ich jeden Schritt des Prozesses mit Dir teile.]]></summary></entry><entry xml:lang="en"><title type="html">Episode 12 &amp;amp; 13: Fade out and clean up</title><link href="https://blog.axelerator.de/elm/en/tetris-fade-out" rel="alternate" type="text/html" title="Episode 12 &amp;amp; 13: Fade out and clean up" /><published>2021-10-16T18:00:00-04:00</published><updated>2021-10-16T18:00:00-04:00</updated><id>https://blog.axelerator.de/elm/en/tetris-fade-out-clean-up-en</id><content type="html" xml:base="https://blog.axelerator.de/elm/en/tetris-fade-out"><![CDATA[<p><img src="/assets/posts/tetris-fade-out/fade.gif" style="float:left; margin: 5px 10px 10px 0" />
In <a href="https://www.youtube.com/watch?v=7HhOdCNfEj4">episode 12(1h:25m)</a> I started with building a simple score tracker. Adding gradual fading became a bit of a cliffhanger, because I introduced a gnarly bug that I was only able to resolve in <a href="https://www.youtube.com/watch?v=OfNkjrJGtyc">episode 13 (1h:20)</a>.
I used this as motivation to clean up and reorganize the code with the help of the glorious <a href="https://github.com/neoclide/coc.nvim"><em>Conquer of Completion</em></a> Vim plugin.</p>

<p>For episode 12 I created a single <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6">commit</a> as before. It’s the head of the <a href="https://github.com/axelerator/elm-tetris/tree/episode12">episode12 branch</a>.</p>

<p>For the changes of episode 13, I went with a different approach. Since I reorganized the code a lot a large number of lines changed. To keep them comprehensible I separated them into multiple smaller commits. Of course, there is still also the <a href="https://github.com/axelerator/elm-tetris/tree/episode13">episode13 branch</a> that represents the state of the code after that episode. To see only the steps I did in that episode you can check out this <a href="https://github.com/axelerator/elm-tetris/pull/1/commits"><em>pull request</em></a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7HhOdCNfEj4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/OfNkjrJGtyc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#scoring">Score tracking</a></li>
  <li><a href="#fading">Fading cleared lines</a></li>
  <li><a href="#cleanup">Clean up</a></li>
</ul>

<hr />

<h3 id="-score-tracking"><a name="scoring"></a> Score tracking</h3>

<p>To be able to keep score I added a new <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R39">type <code class="language-plaintext highlighter-rouge">Score</code></a> that I use in the <code class="language-plaintext highlighter-rouge">GameDetails</code>.
I implemented it in the most simple way: Clearing 1 row = 1 Point. The real Tetris has a much more sophisticated scoring algorithm (Source: <a href="https://tetris.fandom.com/wiki/Scoring">Tetris Wiki</a>)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Level</th>
      <th style="text-align: center">Points for 1 line</th>
      <th style="text-align: center">2 lines</th>
      <th style="text-align: center">3 lines</th>
      <th style="text-align: center">4 lines</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">40</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">300</td>
      <td style="text-align: center">1200</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">80</td>
      <td style="text-align: center">200</td>
      <td style="text-align: center">600</td>
      <td style="text-align: center">2400</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">120</td>
      <td style="text-align: center">300</td>
      <td style="text-align: center">900</td>
      <td style="text-align: center">3600</td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">400</td>
      <td style="text-align: center">1000</td>
      <td style="text-align: center">3000</td>
      <td style="text-align: center">12000</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">level(n) =  40 * (n + 1) 100 * (n + 1) 300 * (n + 1) 1200 * (n + 1)</code></p>

<hr />

<h3 id="-fading-cleared-lines"><a name="fading"></a> Fading cleared lines</h3>

<p>To be able to fade a row I <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R82">added a new variant <code class="language-plaintext highlighter-rouge">FadingRow</code></a> to the <code class="language-plaintext highlighter-rouge">Row</code> type.</p>

<pre><code class="language-Elm">type Row
    = Row (List Field)
    | FadingRow (List Field) Opacity
</code></pre>
<p>A fading row represents a row that was logically removed but is visually still present.
Next to the tile information it also contains a value for the opacity.</p>

<p>To be able to progress the fading out in the speed I desire I need to update our model more often. To achieve that we’re now firing the <code class="language-plaintext highlighter-rouge">GravityTick</code> every <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R548"><em>30</em> instead of every <em>100</em></a> milliseconds.
For every tick we decrease the opacity of all fading rows a bit with the <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R462"><code class="language-plaintext highlighter-rouge">progressFading</code> function</a> until they’ve completely vanished.</p>

<p>It was when I tried to integrate <code class="language-plaintext highlighter-rouge">progressFading</code> in all the right places that I introduced the error that eventually made me give up that day. As part of updating the <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R531"><code class="language-plaintext highlighter-rouge">eraseCompleteRows</code> function</a> I reset the <code class="language-plaintext highlighter-rouge">currentPiece</code>.
The <a href="https://github.com/axelerator/elm-tetris/commit/4bac5a1f167b593b9f949ff66a8868b8f7c5e5b2">first change in episode 13</a> resolves the error and finally the fading works as expected.</p>

<hr />

<h3 id="-clean-up"><a name="cleanup"></a> Clean up</h3>

<p>The rest of that episode I spend separating the general application from the ‘pure’ game logic. Though I wouldn’t go as far as calling it a <em>refactoring</em> since I’ve been mainly moving functions from one module to another.</p>

<p>For that task, I put a new tool of my development environment to use. <a href="https://github.com/neoclide/coc.nvim">Conquer of Completion</a> (short <em>CoC</em>) is a Vim plugin that uses the <a href="https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/">Language Server Protocol</a> to support the developer with language-specific hints. The same protocol is used in Visual Studio Code for many languages for autocompletion and other features like organizing inputs.</p>

<p>With the help of <em>CoC</em> execution operations like moving functions to a different module can be executed much more efficiently. Tedious subtasks like updating imports and removing unused code are reduced to executing the actions proposed by the plugin inline.</p>

<p>Most of the significant steps to set up <em>CoC</em> with Elm for Vim are outlined in the  <a href="https://github.com/elm-tooling/elm-language-server">Elm Language Server project</a>.</p>

<p>I think I’ll do a special episode soon showing how to set up a complete Elm development environment with Vim from scratch.</p>]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[In episode 12(1h:25m) I started with building a simple score tracker. Adding gradual fading became a bit of a cliffhanger, because I introduced a gnarly bug that I was only able to resolve in episode 13 (1h:20). I used this as motivation to clean up and reorganize the code with the help of the glorious Conquer of Completion Vim plugin.]]></summary></entry><entry xml:lang="de"><title type="html">Episode 12 &amp;amp; 13: Ausblenden und Aufräumen</title><link href="https://blog.axelerator.de/elm/de/tetris-fade-out" rel="alternate" type="text/html" title="Episode 12 &amp;amp; 13: Ausblenden und Aufräumen" /><published>2021-10-16T18:00:00-04:00</published><updated>2021-10-16T18:00:00-04:00</updated><id>https://blog.axelerator.de/elm/de/tetris-fade-out-clean-up-de</id><content type="html" xml:base="https://blog.axelerator.de/elm/de/tetris-fade-out"><![CDATA[<p><img src="/assets/posts/tetris-fade-out/fade.gif" style="float:left; margin: 5px 10px 10px 0" />
In <a href="https://www.youtube.com/watch?v=7HhOdCNfEj4">Episode 12(1h:25m)</a> habe ich zunächst einen einfachen Zähler für die entfernten Reihen gebaut. Das graduelle Ausblenden ist zu einen Cliffhanger geworden, da ich dort einen Fehler eingebaut hab, den ich erst in <a href="https://www.youtube.com/watch?v=OfNkjrJGtyc">Episode 13 (1h:20)</a> auflöse. Das nehme ich zum Anlass den Code mit Hilfe des großartigen <a href="https://github.com/neoclide/coc.nvim"><em>Conquer of Completion</em></a> etwas aufzuräumen.</p>

<p>Für Episode 12 habe ich wie bisher einen einzelnen <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6">Commit</a> erzeugt und einen <a href="https://github.com/axelerator/elm-tetris/tree/episode12">Branch</a> der den Code am Ende der Episode enthält.</p>

<p>Die Codeänderungen für Episode 13 habe ich etwas anders organisiert. Da ich den Code großzügig umorganisiert habe betreffen die Änderungen viele Zeilen.
Damit die Git Historie trotzdem übersichtlich bleibt habe ich mehrere kleine Commits erzeugt.
Es gibt natürlich trotzdem einen <a href="https://github.com/axelerator/elm-tetris/tree/episode13"><code class="language-plaintext highlighter-rouge">episode13</code> Branch</a> der den Endzustand enthält. Die Entwicklung zwischen den Episoden 12 und 13 habe ich aber diesmal in einem <a href="https://github.com/axelerator/elm-tetris/pull/1/commits"><strong>Pull-Request</strong></a> zusammengefasst.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/7HhOdCNfEj4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/OfNkjrJGtyc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<hr />

<p>Inhalt:</p>

<ul>
  <li><a href="#scoring">Punktestand</a></li>
  <li><a href="#fading">Ausblenden</a></li>
  <li><a href="#cleanup">Aufräumen</a></li>
</ul>

<hr />

<h3 id="-punktestand"><a name="scoring"></a> Punktestand</h3>

<p>Um sich vergleichen zu können habe ich dem Spiel einen <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R39">Typen <code class="language-plaintext highlighter-rouge">Score</code> für den Punktestand</a> hinzugefügt.
Ich habe die einfachst mögliche Implementierung gewählt: 1 Zeile = 1 Punkt. Das echte Punktesystem von Tetris is um einiges komplizierter (Quelle: <a href="https://tetris.fandom.com/wiki/Scoring">Tetris Wiki</a>)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Level</th>
      <th style="text-align: center">Points for 1 line</th>
      <th style="text-align: center">2 lines</th>
      <th style="text-align: center">3 lines</th>
      <th style="text-align: center">4 lines</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">40</td>
      <td style="text-align: center">100</td>
      <td style="text-align: center">300</td>
      <td style="text-align: center">1200</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">80</td>
      <td style="text-align: center">200</td>
      <td style="text-align: center">600</td>
      <td style="text-align: center">2400</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">120</td>
      <td style="text-align: center">300</td>
      <td style="text-align: center">900</td>
      <td style="text-align: center">3600</td>
    </tr>
    <tr>
      <td style="text-align: center">9</td>
      <td style="text-align: center">400</td>
      <td style="text-align: center">1000</td>
      <td style="text-align: center">3000</td>
      <td style="text-align: center">12000</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">level(n) =  40 * (n + 1) 100 * (n + 1) 300 * (n + 1) 1200 * (n + 1)</code></p>

<hr />

<h3 id="-ausblenden"><a name="fading"></a> Ausblenden</h3>

<p>Für das Ausblenden habe ich eine <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R82">neue ‘Zeilenvariante’ hinzugefügt</a>:</p>

<pre><code class="language-Elm">type Row
    = Row (List Field)
    | FadingRow (List Field) Opacity
</code></pre>

<p>Die <code class="language-plaintext highlighter-rouge">FadingRow</code> stellt eine Zeile dar die logisch entfernt wurde aber visuell noch teilweise sichtbar ist.
Neben den einzelnen Spalten enthält sie auch einen Transparenzwert.
Um das Ausblenden in einer optisch ansprechenden Geschwindigkeit zu erreichen feuern wir jetzt unseren <code class="language-plaintext highlighter-rouge">GravityTick</code> alle <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R548"><em>30</em> anstatt <em>100</em> Millisekunden</a> und erhöhen die Transparenz der ‘ausblendenden’ Reihen bei jedem Tick mit der <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R462"><code class="language-plaintext highlighter-rouge">progressFading</code> Funktion</a>.</p>

<p>Bei dem Versuch <code class="language-plaintext highlighter-rouge">progressFading</code> an all den richtigen Stellen aufzurufen habe ich dann auch den Fehler eingebaut. Als Teil von <code class="language-plaintext highlighter-rouge">eraseCompleteRows</code> habe ich <a href="https://github.com/axelerator/elm-tetris/commit/bcb5e904ecdc7127bb379a836ecfdf874d1552f6#diff-2dd82f159d96fbfcd26fb7d885d25e0d54efde9e19a42494b416fa84a5aca568R531">das aktuelle Teil zurückgesetzt</a>.
Der <a href="https://github.com/axelerator/elm-tetris/commit/4bac5a1f167b593b9f949ff66a8868b8f7c5e5b2">erste Commit</a> von Episode 13 behebt diesen Fehler und alles funktioniert wie erwartet.</p>

<hr />

<h3 id="-aufräumen"><a name="cleanup"></a> Aufräumen</h3>

<p>Den Rest dieser Episode verbringe ich damit die allgemeine Anwendungslogik von der ‘reinen’ Spiellogik zu trennen. Ich würde es allerdings noch nicht als eine Rafaktorisierung bezeichnen denn die Änderungen sind alle recht ‘mechanisch’. Damit meine ich, dass die Funktionen sich fast nicht geändert haben sondern lediglich den Ort gewechselt haben wo sie gespeichert sind.</p>

<p>Dabei habe ich mir ein neues Werkzeug in meiner Entwicklungsumgebung zu Nutze gemacht. <a href="https://github.com/neoclide/coc.nvim">Conquer of Completion</a> kur <em>CoC</em> ist ein Vim Plugin, dass das <a href="https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/">Language Server Protocol</a> nutzt um den Entwickler mit Sprachspezifischen Hinweisen zu unterstützen. Es ist das gleiche Protokoll das auch in VS Code für viele Sprachen verwendet wird um Autovervollständigung und andere Funktionen wie das Organisieren von Imports zu unterstützen.</p>

<p>Mit Hilfe des <em>CoC</em> lassen sich Operationen wie das Verschieben von Funktionen deutlich effizienter ausführen, da das Plugin lästige Tätigkeiten, wie das importieren von Modulen und entfernen von ungenutztem Code automatisiert.</p>

<p>Ein paar entscheidende Hinweise wie dieses Setup einzurichten ist habe ich in dem Projekt für den <a href="https://github.com/elm-tooling/elm-language-server">Elm Language Server</a> gefunden.</p>

<p>Ich denke ich werde in naher Zukunft nochmal eine dedizierte Episode zur Einrichtung eine Elm Entwicklungsumgebung machen.</p>]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[In Episode 12(1h:25m) habe ich zunächst einen einfachen Zähler für die entfernten Reihen gebaut. Das graduelle Ausblenden ist zu einen Cliffhanger geworden, da ich dort einen Fehler eingebaut hab, den ich erst in Episode 13 (1h:20) auflöse. Das nehme ich zum Anlass den Code mit Hilfe des großartigen Conquer of Completion etwas aufzuräumen.]]></summary></entry><entry xml:lang="de"><title type="html">Episode 11: Game Over</title><link href="https://blog.axelerator.de/elm/de/tetris-game-over" rel="alternate" type="text/html" title="Episode 11: Game Over" /><published>2021-09-23T18:00:00-04:00</published><updated>2021-09-23T18:00:00-04:00</updated><id>https://blog.axelerator.de/elm/de/tetris-game-over-de</id><content type="html" xml:base="https://blog.axelerator.de/elm/de/tetris-game-over"><![CDATA[<p><img src="/assets/posts/tetris-game-over/game-over.gif" style="float:right; margin: 5px 10px 10px 0" />
Noch fehlen ein paar Elemente damit unser Tetris ‘vollständig’ ist. Aber zumindest können wir nach <a href="https://youtu.be/To2MtBs3w6A">Episode 11 (40min)</a> sagen “Game Over”.</p>

<p>Die Code-Änderungen von dieser Woche gibt es im <a href="https://github.com/axelerator/elm-tetris/tree/episode11">episode11 Branch</a> bzw <a href="https://github.com/axelerator/elm-tetris/commit/8838b88b82af29c95ac3a0bfafe17eba27b254b9">Commit</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/To2MtBs3w6A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>Diese Woche habe ich keine großartig neuen Konzepte genutzt. Aber gerade das ist etwas wo sich <em>Elm</em> von vielen anderen Sprachen abgrenzt. Die Syntax ist verhältnismäßig übersichtlich. In anderen Sprachen wie Ruby oder Python finden wir mehrere Dogmen (objektorientiert und funktional). 
Daher ergeben sich auch mehrere Ansätze ein Problem zu lösen von denen nicht unbedingt einer mehr oder weniger den Prinipien der Sprache entsprechen muss. Der ganzheitlich funktionale Ansatz von Elm führt zu einheitlicheren Lösungen. Das hilft es schneller Code zu verstehen, den man nicht selber geschrieben hat. Und natürlich auch selber besser verständlichen Code zu schreiben.</p>

<p>Dennoch gibt es natürlich auch innerhalb der Syntax noch genügend unterschiedliche Möglichkeiten sich auszudrücken. Ein Werkzeug an das ich häufig erst im zweiten Durchgang denke ist das <em>pattern matching</em>.</p>

<p>Die wichtigste Änderung war die Änderung des zentralen <code class="language-plaintext highlighter-rouge">Model</code> Typs von einem <em>alias</em> zu eine <em>algebarischen Datentypen</em>.</p>

<p><em>vorher</em>:</p>
<pre><code class="language-Elm">type alias Model =
  { board : Board
  , currentPiece : Maybe CurrentPiece
  }
</code></pre>

<p><em>nachher</em>:</p>
<pre><code class="language-Elm">type Model =
    = RunningGame GameDetails
    | GameOver Board
</code></pre>

<p>Auch wenn der <em>“Inhalt”</em> der beiden Varianten nahezu identisch ist lohnt es sich <strong>jetzt</strong> eine klare Unterscheidung zwischen den beiden Zuständen einzuführen. Eine ganze Reihe von Operationen, beziehungweise Ereignissen machen keinen Sinn mehr wenn das Spiel zu Ende ist.
Indem wir dies als eigene Variante ausdrücken ermöglichen wir es dem Compiler uns zu “allen Stellen zu führen” an denen wir unsere Logik daraufhin untersuchen sollten.</p>

<p>Ein zentrale Stelle ist die <code class="language-plaintext highlighter-rouge">update</code> Funktion. Wie im Stream erwähnt habe ich mir die Awendung des <em>pattern matching</em> für die <a href="https://github.com/rtfeldman/elm-spa-example"><code class="language-plaintext highlighter-rouge">update</code> Funktion</a> bei <a href="https://twitter.com/rtfeldman">Richard Feldman</a> abgeschaut.
Sein <a href="https://github.com/rtfeldman/elm-spa-example"><em>Elm SPA example</em></a> ist eine vollständige Elm Anwendung bei der man sich einige gute Muster abschauen kann.</p>

<p>Der Anfang der <code class="language-plaintext highlighter-rouge">update</code> Funktion:</p>

<pre><code class="language-Elm">update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )
update msg model =
  case msg of
    GravityTick _ -&gt;
      dropCurrentPiece model
</code></pre>

<p>sieht nach der Bearbeitung wie folgt aus:</p>
<pre><code class="language-Elm">update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )
update msg model =
  case ( msg, model ) of
    ( GravityTick _, RunningGame gameDetails ) -&gt;
      dropCurrentPiece gameDetails
</code></pre>

<p>In dem wir den Ausdruck zwischen <code class="language-plaintext highlighter-rouge">case</code> und <code class="language-plaintext highlighter-rouge">of</code> auf ein Tupel von der <code class="language-plaintext highlighter-rouge">msg</code> <strong>und</strong> dem aktuellen <code class="language-plaintext highlighter-rouge">model</code> erweitern können wir jetzt in jedem Zweig neben der Nachricht auch mit dem aktuellen Spielzustand vergleichen.</p>

<p>Desweiteren fügen wir einen Zweig hinzu der für alle Kombinationen aufgerufen wird die wir <em>nicht</em> explizit erwähnen.</p>

<p>So ergibt sich die angenehme Situation, dass wir ungültige Kombinationen, wie zum Beispiel <code class="language-plaintext highlighter-rouge">(KeyDown key, GameOver)</code> nicht spezifieren brauchen.</p>

<p>Das heißt am Ende kommen wir mit weniger Code aus. Weniger Code ist natürlich immer erstrebenswert. Allerdings hat diese Lösung auch einen Nachteil.
In der vorherigen Version weist uns der Compiler auf einen fehlenden Zweig in der <code class="language-plaintext highlighter-rouge">update</code> Funktion hin sobald wir eine neue Variante für unseren <code class="language-plaintext highlighter-rouge">Msg</code> Datentypen hinzufügen. Das tut er in der überarbeiteten Version nun nicht mehr, da wir mit dem <code class="language-plaintext highlighter-rouge">_ -&gt; ...</code> Zweig ja ein “passendes” Muster haben.
Man muss also bei der Anwedung dieser Optimierung gut überlegen was einem wichtiger ist.</p>

<ul>
  <li>Wieviele Zweige muss ich explizit aufzählen falls ich ohne den <code class="language-plaintext highlighter-rouge">_ -&gt; ..</code> Zweig arbeite?</li>
  <li>Wie einfach ist es die Stellen zu finden die angefasst werden müssen, wenn ich <strong>mit</strong> dem <code class="language-plaintext highlighter-rouge">_ -&gt; ..</code> Zweig arbeite?</li>
</ul>]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[Noch fehlen ein paar Elemente damit unser Tetris ‘vollständig’ ist. Aber zumindest können wir nach Episode 11 (40min) sagen “Game Over”.]]></summary></entry><entry xml:lang="en"><title type="html">Episode 11: Game Over</title><link href="https://blog.axelerator.de/elm/en/tetris-game-over" rel="alternate" type="text/html" title="Episode 11: Game Over" /><published>2021-09-23T18:00:00-04:00</published><updated>2021-09-23T18:00:00-04:00</updated><id>https://blog.axelerator.de/elm/en/tetris-game-over-en</id><content type="html" xml:base="https://blog.axelerator.de/elm/en/tetris-game-over"><![CDATA[<p><img src="/assets/posts/tetris-game-over/game-over.gif" style="float:right; margin: 5px 10px 10px 0" />
There are still a few elements missing to be able to call our Tetris complete. However, with the changes from <a href="https://youtu.be/To2MtBs3w6A">episode 11 (40min)</a> we’re at least able to tell the player <em>“Game Over”</em>.</p>

<p>The last <a href="https://github.com/axelerator/elm-tetris/commit/8838b88b82af29c95ac3a0bfafe17eba27b254b9">commit</a> on the <a href="https://github.com/axelerator/elm-tetris/tree/episode11">episode11 branch</a> reflects the changes I made during the recording.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/To2MtBs3w6A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>This time I didn’t really use any new, fancy concepts. But this is another feature that differentiates <em>Elm</em> from many other programming languages. The Syntax is comparatively simple. In other languages, like <em>Ruby</em> or <em>Python</em> for example, we find syntax elements for many dogmas (object oriented <em>and</em> functional).
As a result, there are naturally multiple ways to approach a problem, none of which is necessarily more dogmatic to the language than the other.
The fact that Elm is dedicated to the <em>functional</em> approach <strong>only</strong> leads to fewer diverging ways to solve a particular problem. This leads to more unified code which helps to understand code that I’ve not written myself faster. And conversely also to write code that <strong>other people</strong> understand faster.</p>

<p>Of course, there is still enough room to express things a bit differently, even in Elm. A tool that I often only think of on the second attempt is <strong>pattern matching</strong>. But I did manage to think of it for this week’s changes eventually.</p>

<p>The most important change however was the <em>‘upgrade’</em> of our central <code class="language-plaintext highlighter-rouge">Model</code> type from an <em>alias</em> to an <em>algebraic data type</em>.</p>

<p><em>before</em>:</p>
<pre><code class="language-Elm">type alias Model =
  { board : Board
  , currentPiece : Maybe CurrentPiece
  }
</code></pre>

<p><em>after</em>:</p>
<pre><code class="language-Elm">type Model =
    = RunningGame GameDetails
    | GameOver Board
</code></pre>

<p>Even though the <em>“content”</em> of the two variants is nearly the same it pays off to introduce a clear distinction between the two game states <strong>now</strong>. A variety of operations doesn’t make sense to apply when the game has ended.
By expressing that state in its own proper variant we can let the compiler direct us to the places in the code where we should check if the logic still adds up for our new case.</p>

<p>One central place for that is the <code class="language-plaintext highlighter-rouge">update</code> function. As mentioned in the stream I learned the following trick from <a href="https://twitter.com/rtfeldman">Richard Feldman</a>. He maintains the <a href="https://github.com/rtfeldman/elm-spa-example"><em>Elm SPA example</em></a>, a fully-fledged fullstack application built with Elm, which contains lots of useful patterns on how to deal with real-world problems.</p>

<p>I changed our <code class="language-plaintext highlighter-rouge">update</code> function from</p>

<pre><code class="language-Elm">update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )
update msg model =
  case msg of
    GravityTick _ -&gt;
      dropCurrentPiece model
</code></pre>

<p>to look like this (abbreviated):</p>
<pre><code class="language-Elm">update : Msg -&gt; Model -&gt; ( Model, Cmd Msg )
update msg model =
  case ( msg, model ) of
    ( GravityTick _, RunningGame gameDetails ) -&gt;
      dropCurrentPiece gameDetails
</code></pre>

<p>By extending the expression between <code class="language-plaintext highlighter-rouge">case ... of</code> to a <strong>tuple</strong> of <code class="language-plaintext highlighter-rouge">msg</code> <strong>and</strong> <code class="language-plaintext highlighter-rouge">model</code> we can now also match on the state of our model.
We also add a “fallthrough” branch that gets matched for all the combinations we didn’t explicitly name.
That has the pleasant effect that we <strong>don’t</strong> need to specify the combinations that don’t make sense, for example <code class="language-plaintext highlighter-rouge">(KeyDown key, GameOver)</code></p>

<p>That means in the end we need <em>less code</em>, which is usually desirable. But it also comes with one drawback. We lose the luxury of the compiler being able to point us to the <code class="language-plaintext highlighter-rouge">update</code> function whenever we add a new variant to our <code class="language-plaintext highlighter-rouge">Msg</code> type. In the edited version of our <code class="language-plaintext highlighter-rouge">update</code> function we now have the <code class="language-plaintext highlighter-rouge">_ -&gt; ...</code> branch that will also match any new variant we match.
So in the end one has to balance what’s more important on a case-by-case basis.</p>

<ul>
  <li>How many cases do I have to be explicit if I don’t want to add the fall through?</li>
  <li>How easy is it to find out where I need to extend case expressions if I add a new variant?</li>
</ul>]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[There are still a few elements missing to be able to call our Tetris complete. However, with the changes from episode 11 (40min) we’re at least able to tell the player “Game Over”.]]></summary></entry></feed>