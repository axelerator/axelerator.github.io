<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://blog.axelerator.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.axelerator.de/" rel="alternate" type="text/html" /><updated>2024-01-02T13:57:20-05:00</updated><id>https://blog.axelerator.de/feed.xml</id><title type="html">Rants &amp;amp; ramblings of yours truly</title><subtitle>Mostly posts about how to make getting started with Elm easy and the general joys of functional programming.</subtitle><entry xml:lang="de"><title type="html">Der fehlgeleitete Traum von Sprachmonogamie in der Webentwicklung</title><link href="https://blog.axelerator.de/development/de/language-monogamy" rel="alternate" type="text/html" title="Der fehlgeleitete Traum von Sprachmonogamie in der Webentwicklung" /><published>2024-01-02T13:00:00-05:00</published><updated>2024-01-02T13:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/language-monogamy-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/language-monogamy"><![CDATA[<p><img src="/assets/posts/language-monogamy/handshake.webp" width="230" style="float:right; margin: 5px 10px 10px 0" />
In der sich ständig wandelnden Welt der Webentwicklung streben viele nach dem
Ideal, die gleiche Programmiersprache sowohl im Frontend als auch im Backend zu
verwenden. Wenn wir uns aber auf gemeinsame Daten anstatt auf eine gemeinsame Sprache 
Sprache konzentrieren, können wir das Beste aus beiden Welten rausholen ohne auf 
signifikante Synergien verzichten zu müssen.
—</p>

<p>Content:</p>

<ul>
  <li><a href="#dream">Der Traum von der einzigen Programmiersprache</a></li>
  <li><a href="#illusion">Entzauberung der Illusion</a></li>
  <li><a href="#data">Gemeinsame Datendefinition vs. gemeinsame Sprache</a></li>
  <li><a href="#ruelm">Ein Praxisbeispiel: Das Zusammenspiel von Rust und Elm</a></li>
</ul>

<hr />

<h2 id="-der-traum-von-der-einzigen-programmiersprache"><a name="dream"></a> Der Traum von der einzigen Programmiersprache</h2>

<p>Viele sind von der Idee angetan, eine einzige Programmiersprache für Frontend und Backend zu verwenden.
<label for="def-nodejs" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-nodejs" class="margin-toggle" />
<span class="marginnote">
<a href="https://nodejs.org/en/about"><img src="/assets/posts/language-monogamy/nodejs-logo.svg" style="background-color:#333" /></a><br />
<a href="https://nodejs.org/en/about">Node.js</a> ist eine Laufzeitumgebung, mit der Entwickler JavaScript-Code serverseitig ausführen können.
</span></p>

<p>Ein Grund dafür ist der Reiz, nur eine einzige Sprache beherrschen zu müssen.
<a href="https://nodejs.org/en">NodeJS</a> beispielsweise bietet JavaScript-Entwicklern
die Möglichkeit, ihr Backend in der gleichen Sprache zu schreiben, die der
Browser versteht.</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 40%" /><br />
<a href="https://htmx.org/docs/">htmx</a> ist eine Bibliothek, die es Ihnen ermöglicht, auf moderne Browserfunktionen direkt von HTML aus zuzugreifen, anstatt Javascript zu verwenden.
</span></p>

<p><a href="https://htmx.org/docs/">htmx</a> bietet Backend-Entwicklern mehr Möglichkeiten,
da sie nur HTML in ihrer Backend-Sprache schreiben müssen, um eine dynamische
UX zu erstellen.</p>

<p>Ein zweites Argument ist die Idee, bestimmte Funktionalitäten nur einmal zu schreiben und sie sowohl im Front- als auch im Backend verwenden zu können. Halten wir jedoch inne und überlegen wir, ob diese Gründe ein vollständiges Bild ergeben oder lediglich eine Optimierung für ein lokales Maximum darstellen.</p>

<h2 id="-entzauberung-der-illusion"><a name="illusion"></a> Entzauberung der Illusion</h2>

<p>Meiner Meinung nach wird die Menge an Codes/Funktionalität, die tatsächlich
zwischen dem Frontend und dem Backend geteilt werden kann, oft überschätzt
wird. Das Backend und der Browser arbeiten in sehr unterschiedlichen
Laufzeitumgebungen, die unterschiedliche Programmiermuster erfordern. Im
Browser programmieren wir eine interaktive grafische Benutzeroberfläche. Im
Backend ist die effiziente Verwaltung der Businessdaten unser primäres Ziel</p>

<p>Weiter würde ich behaupten, dass man in den meisten Fällen mindestens genauso
viel (wenn nicht sogar mehr) Aufwand in das Erlernen des <strong>Frameworks</strong> (und des
damit gelösten Problems) investieren muss wie in das Erlernen der
Programmiersprache.</p>

<p>Zum Beispiel gibt es kaum Synergien zwischen dem Erlernen von, sagen wir,
<strong>“React”</strong> und <strong>“Ruby on Rails”</strong>. Der Grund ist nicht so sehr, dass sie in
unterschiedlichen Sprachen geschrieben sind, sonder die Tatsache, dass sie
völlig unterschiedliche Probleme lösen.</p>

<h2 id="-gemeinsame-datendefinition-vs-gemeinsame-sprache"><a name="data"></a> Gemeinsame Datendefinition vs. gemeinsame Sprache</h2>

<p>Das überwiegende Potenzial für Wiederverwendung von Code ist die 
Nutzung <strong>gemeinsamer Datenstrukturen</strong>!</p>

<p><label for="def-gql" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-gql" class="margin-toggle" />
<span class="marginnote">
<a href="https://graphql.org"><img src="/assets/posts/language-monogamy/graphql-logo.svg" style="width: 2em" /> GraphQL</a><br />
ermöglicht es ein Schema für Datentypen und -beziehungen einer API definieren, das als Vertrag zwischen dem Client und dem Server dient und eine strukturierte und konsistente Kommunikation gewährleistet.</span></p>

<p>Um dies zu erreichen setzen viele Firmen <a href="https://graphql.org">GraphQL</a> ein. 
Die Verwaltung einer <strong>“GraphQL-Schicht”</strong> ist jedoch mit erheblichen Kosten verbunden.
Oft haben Unternehmen ganze Teams, die sich ausschließlich um die Integrität der GraphQL API kümmern. 
Darüber hinaus verfügt GraphQL über eine eigene (Schema-/Abfrage-)Sprache, die die Entwickler ebenfalls erlernen müssen.</p>

<p>Wenn man sich auf das richtige Problem <strong>- die gemeinsame Datendefinition -</strong> konzentriert und die Herausforderung, eine neue Sprache zu erlernen, ins richtige Verhältnis setzt, tun sich eine Menge interessanter Möglichkeiten auf.</p>

<p>Anstatt sich auf die Homogenität der Programmiersprache zu fixieren, bietet die Konzentration auf ein gemeinsames Verständnis von Datenstrukturen einen pragmatischeren und effektiveren Ansatz, um die Wiederverwendung von Code dort zu erreichen, wo es zählt.</p>

<h2 id="ein-praxisbeispiel-das-zusammenspiel-von-rust-und-elm"><a name="ruelm"></a>Ein Praxisbeispiel: Das Zusammenspiel von Rust und Elm</h2>

<p><label for="def-elm" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-elm" class="margin-toggle" />
<span class="marginnote">
<a href="https://elm-lang.org"><img src="/assets/posts/language-monogamy/elm-logo.svg" style="width: 4em" /> Elm</a>
ist eine kleine Programmiersprache für die Front-End-Webentwicklung mit Fokus auf Einfachheit.
In meinem <a href="../a-tour-of-elm">vorherigen Blogpost</a> schildere ich im Detail warum jeder Entwickler
Elm ausprobieren sollte.
</span></p>

<p>Elm ist eine funktionale Programmiersprache für die Front-End-Webentwicklung,
die für ihr starkes Typensystem und ihren Fokus auf Einfachheit, Korrektheit
und Zuverlässigkeit bei der Erstellung interaktiver Benutzeroberflächen bekannt
ist.</p>

<p>Rust zeichnet sich im Backend durch seinen Fokus auf Sicherheit, Leistung und
Gleichzeitigkeit aus und bietet eine robuste und effiziente
Entwicklungserfahrung.</p>

<p>Die Wahl von Elm als Frontend-Sprache und Rust im Backend bietet uns das Beste
aus beiden Welten. Da beide Sprachen statisch getypt sind, können wir die
Typinformationen aus unseren Rust-Datenstrukturen verwenden, um automatiesiert Elm-Typen und
(De-)Serialisierer zu erzeugen.</p>

<p><label for="def-elmrs" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-elmrs" class="margin-toggle" />
<span class="marginnote">
<a href="https://crates.io/crates/elm-rs">elm_rs</a> ist eine Rust Crate die
automatisch Typdefinitionen und Funktionen für Elm aus Rust-Backend-Typen generiert, so dass es einfach ist, die beiden auf dem gleichen Stand zu halten.</span></p>

<p>Das Backend ist die natürliche erste Wahl für die “Quelle der Wahrheit” wenn es 
um die Defintion der gemeinsamen Datentypen geht. 
Die elm_rs-Crate übersetzt diese Rust-Datentypen dann in die
entsprechenden Elm-Typen (und De-/Serialisierer).</p>

<p>Anstatt die Komplexität der Anwengung durch eine dedizierte API-Schicht zu erhöhen,
definieren wir zwei Datentypen <code class="language-plaintext highlighter-rouge">ToBackend</code> und <code class="language-plaintext highlighter-rouge">ToFrontend</code>, die jeweils die
Nachrichten repräsentieren, die entweder zum Backend oder zum Frontend fließen.
Diese Art der Kommunikation ist stark von <a href="https://dashboard.lamdera.app/docs/overview">Lamdera</a> inspiriert.
<label for="def-lamdera" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-lamdera" class="margin-toggle" />
<span class="marginnote">
<a href="https://dashboard.lamdera.app/docs/overview"><img src="/assets/posts/language-monogamy/lamdera-logo.png" style="width: 10em" /></a><br />
Lamdera ist eine Full-Stack-Web-Plattform, die Elm sowohl im Frontend als auch im Backend verwendet.
Allerdings kommt sie mit erhebliche Einschränkungen, wie sich Code im Backend ausführen lässt.
</span></p>

<p>Auf diese Weise können wir Elm dafür einsetzen wofür es geschaffen wurde: Sicheres Arbeiten
mit der Brwoser API ohne auf ansprchsvolle UI verzichten zu müssen.
Im Gegenzug müssen wir uns im Backend <strong>überhaupt nicht</strong> mit HTML und dem
Zustand der Benutzeroberfläche befassen.</p>

<p>Mein <a href="https://github.com/axelerator/ruelm">Startertemplate <em>“Rülm”</em></a> zeigt das
so eine Architektur abseits von den populären Web-Frameworks nicht kompliziert
sein muss. In weniger als <code class="language-plaintext highlighter-rouge">400</code> Zeilen Code bekommen wir eine Webanwendung die
typsicher und effizient Daten in beide Richtungen austauschen kann. Und das
alles ohne externe Build-Tools!</p>]]></content><author><name></name></author><category term="elm" /><category term="rust" /><summary type="html"><![CDATA[In der sich ständig wandelnden Welt der Webentwicklung streben viele nach dem Ideal, die gleiche Programmiersprache sowohl im Frontend als auch im Backend zu verwenden. Wenn wir uns aber auf gemeinsame Daten anstatt auf eine gemeinsame Sprache Sprache konzentrieren, können wir das Beste aus beiden Welten rausholen ohne auf signifikante Synergien verzichten zu müssen. —]]></summary></entry><entry xml:lang="en"><title type="html">The misguided dream of language monogamy in web development</title><link href="https://blog.axelerator.de/development/en/language-monogamy" rel="alternate" type="text/html" title="The misguided dream of language monogamy in web development" /><published>2024-01-02T13:00:00-05:00</published><updated>2024-01-02T13:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/language-monogamy-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/language-monogamy"><![CDATA[<p><img src="/assets/posts/language-monogamy/handshake.webp" width="230" style="float:right; margin: 5px 10px 10px 0" />
In the ever-changing world of web development, many seek the ideal of using one
language for both frontend and backend.
But if we focus on common data instead of a common language 
language, we can get the best out of both worlds without having to sacrifice 
significant synergies.
—</p>

<p>Content:</p>

<ul>
  <li><a href="#dream">Exploring the One-Language Dream</a></li>
  <li><a href="#illusion">Unraveling the Illusion</a></li>
  <li><a href="#data">Shared Data Definition vs. Language Uniformity</a></li>
  <li><a href="#ruelm">A Real-world Example: Rust and Elm Collaboration</a></li>
</ul>

<hr />

<h2 id="-exploring-the-one-language-dream"><a name="dream"></a> Exploring the One-Language Dream:</h2>

<p>Many are drawn to the idea of sticking to a single programming language for both frontend and backend.
<label for="def-nodejs" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-nodejs" class="margin-toggle" />
<span class="marginnote">
<a href="https://nodejs.org/en/about"><img src="/assets/posts/language-monogamy/nodejs-logo.svg" style="background-color:#333" /></a><br />
<a href="https://nodejs.org/en/about">Node.js</a> is a runtime environment that allows developers to execute JavaScript code server-side
</span></p>

<p>One reason is the appeal of having to master just a single language 
For example <a href="https://nodejs.org/en">NodeJS</a>
offers JavaScript developers to write their backend in
the same language that the browser understands.</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 40%" /><br />
<a href="https://htmx.org/docs/">htmx</a> is a library that allows you to access modern browser features directly from HTML, rather than using javascript.
</span></p>

<p><a href="https://htmx.org/docs/">htmx</a> advertises more to backend developers by having to only produce HTML in their backend language 
to create a dynamic UX.</p>

<p>A second argument, is the idea of writing certain functionalities only <em>once</em>
and being able to use them both on front- and backend. However, let’s pause and
consider whether these reasons paint the complete picture or merely optimize
for a local maximum.</p>

<h2 id="unraveling-the-illusion"><a name="illusion"></a>Unraveling the Illusion</h2>

<p>I would argue that the <em>surface area</em> of code/functionality that can <strong>genuinely be
reused</strong> between the frontend and the backend is often overestimated. 
The backend and the browser, operate in vastly different runtime environments,
demanding distinct programming patterns. 
In the browser, we run an interactive, graphical user interface.
Our primary goal in the backend is the correct and efficient management of business data.</p>

<p>I would further argue that in most cases you will spend at least as much (if not
more) effort learning the <strong>framework</strong> (and the problem they’re solving) as you
spend learning the programming language.</p>

<p>The reason that there are little synergies between learning let’s say <em>React</em> and
<em>Ruby on Rails</em> is not so much that they are written in different languages. It’s the
fact that they solve completely disparate problems.</p>

<h2 id="shared-data-definition-vs-language-uniformity"><a name="data"></a>Shared Data Definition vs. Language Uniformity</h2>

<p>The main potential for code reuse is the use of <strong>shared data structures</strong>!</p>

<p><label for="def-gql" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-gql" class="margin-toggle" />
<span class="marginnote">
<a href="https://graphql.org"><img src="/assets/posts/language-monogamy/graphql-logo.svg" style="width: 2em" /> GraphQL</a><br />
lets you define a schema for the types and relationships of data in an API, serving as a contract between the client and the server, ensuring structured and consistent communication.
</span></p>

<p>To achieve this, many companies use <a href="https://graphql.org">GraphQL</a>. 
However, managing a <strong>“GraphQL layer”</strong> is associated with considerable costs.
Companies often have entire teams dedicated solely to the integrity of the GraphQL API. 
On top of that GraphQL comes with its own (schema/query) language that developers have to learn as well.</p>

<p>If you focus on the right problem <strong>- “the common data definition” -</strong> and put the challenge of learning a new language in the right perspective, a lot of interesting possibilities open up.
Rather than fixating on the homogeneity of programming languages, focusing on a
shared understanding of data structures provides a more pragmatic and effective
approach to achieving code reuse <em>where it matters the most</em>.</p>

<h2 id="a-real-world-example-rust-and-elm-collaboration"><a name="ruelm"></a>A Real-world Example: Rust and Elm Collaboration</h2>

<p><label for="def-elm" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-elm" class="margin-toggle" />
<span class="marginnote">
<a href="https://elm-lang.org"><img src="/assets/posts/language-monogamy/elm-logo.svg" style="width: 4em" /> Elm</a>
is a <strong>small</strong> programming language focused on simplicity. In my 
<a href="../a-tour-of-elm">previous post</a>,
I go into detail why I think everyone should give it a try.
</span></p>

<p>Elm is a functional programming language for front-end web development,
known for its strong type system and focus on simplicity, correctness,
and reliability in building interactive user interfaces.</p>

<p>Rust excels in the backend with its focus on safety, performance, and concurrency,
offering a robust and efficient development experience.</p>

<p>Choosing Elm as the frontend language and Rust in the backend gives us the best
of both worlds.
Since both are statically typed we can use the type information from our Rust 
data structures to generate Elm types and (de-)serializers.</p>

<p><label for="def-elmrs" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-elmrs" class="margin-toggle" />
<span class="marginnote">
<a href="https://crates.io/crates/elm-rs">elm_rs</a> is a Rust crate that
automatically generates type definitions and functions for your Elm frontend from your Rust backend types, making it easy to keep the two in sync. 
</span></p>

<p>The backend makes the natural candidate for the <em>“source of truth”</em> of the shared
data type. The <code class="language-plaintext highlighter-rouge">elm_rs</code> crate translates the Rust data types into the
corresponding Elm types (and de-/serializers).</p>

<p>Instead of adding complexity through a dedicated API layer we define 
two data types <code class="language-plaintext highlighter-rouge">ToBackend</code> or <code class="language-plaintext highlighter-rouge">ToFrontend</code>, each representing messages flowing
either to the backend or to the frontend.
This way of communication is highly inspired by <a href="https://dashboard.lamdera.app/docs/overview">Lamdera</a>.
<label for="def-lamdera" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-lamdera" class="margin-toggle" />
<span class="marginnote">
<a href="https://dashboard.lamdera.app/docs/overview"><img src="/assets/posts/language-monogamy/lamdera-logo.png" style="width: 10em" /></a><br />
Lamdera is a full-stack platform that actually <strong>does</strong> use Elm in both the frontend and the backend.
But it also imposes significant restrictions on how you can run code in the backend.
</span></p>

<p>In this way, we can use Elm for what it was created for: Working 
with the Brwoser API in a safe and delightful way without having to sacrifice a responsive UI.
In return, we don’t have to deal with HTML and the state of the user interface in the backend <strong>at all</strong>.</p>

<p>My <a href="https://github.com/axelerator/ruelm">starter template <em>“Rülm”</em></a> shows that such an architecture beyond the popular web frameworks
does not have to be complicated. In less than <code class="language-plaintext highlighter-rouge">400</code> lines of code we get a web application that is type-safe
and efficiently exchange data in both directions.
And all this without external build tools!</p>]]></content><author><name></name></author><category term="elm" /><category term="rust" /><summary type="html"><![CDATA[In the ever-changing world of web development, many seek the ideal of using one language for both frontend and backend. But if we focus on common data instead of a common language language, we can get the best out of both worlds without having to sacrifice significant synergies. —]]></summary></entry><entry xml:lang="de"><title type="html">Entdecke funktionale Programmierung mit Elm</title><link href="https://blog.axelerator.de/development/de/a-tour-of-elm" rel="alternate" type="text/html" title="Entdecke funktionale Programmierung mit Elm" /><published>2023-12-09T14:00:00-05:00</published><updated>2023-12-09T14:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/a-tour-of-elm-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/a-tour-of-elm"><![CDATA[<p><img src="/assets/posts/a-tour-of-elm/elm.webp" width="130" style="float:left; margin: 5px 10px 10px 0" />
Wenn Du mit funktionaler Programmierung liebäugelst oder in die Entwicklung von
Single Page Applications (SPA) einsteigen willst, gibt es kein besseres
Tool als Elm. Elm zeichnet sich als eine Sprache aus, die nicht nur die
Entwicklung angenehm macht, sondern auch als perfekter Einstieg in die Welt der
funktionalen Programmierung dient.</p>

<hr />

<h2 id="statisch-getypte-glückseligkeit">Statisch getypte Glückseligkeit</h2>

<p>Einer der wichtigsten Vorzüge von Elm ist, man mag es kaum glauben, die statische Typisierung.
Im Vergleich zu JavaScript bietet das entscheidende Vorteile. Der Compiler
fungiert als treuer Helfer und fängt Fehler ab, bevor sie zur Laufzeit
Schaden anrichten können. 
Was Elm auszeichnet, ist nicht nur die Typisierung selbst, sondern auch die unglaubliche Klarheit der Compiler-Meldungen.</p>

<p>Elm ist nicht nur eine weitere funktionale Sprache, sondern eine komplettes
Werkstatt für die Erstellung von SPAs. 
Wenn wir in “React-Begriffen” denken, kombiniert sie:</p>

<ul>
  <li><em>TypeScript</em> (Sprache)</li>
  <li><em>NPM</em> (Paket manager)</li>
  <li><em>React</em> (Rendering)</li>
  <li><em>Redux</em> (State Management)</li>
</ul>

<p>Alles in <strong>einem einzigen</strong> Werkzeug.</p>

<p><label for="def-haskell" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-haskell" class="margin-toggle" />
<span class="marginnote">
<a href="https://www.haskell.org">
<img src="/assets/posts/a-tour-of-elm/haskell-logo.svg" style="width: 35%" alt="Haskell logo" /></a>
Haskell wurde als Forschungssprache entwickelt und war als solche ausdrücklich dafür ausgelegt
um experimentelle Funktionen und Syntax zu enthalten.<br />
Das führt zu vielen verschiedenen “Stilen”, die es schwer machen, die Sprache schnell zu lernen.
</span></p>

<p>Durch die Konzentration auf eine einzige Zielplattform (den Browser) ist Elm
einfacher als seine funktionalen Allzweck-Pendants wie <a href="https://www.haskell.org">Haskell</a>.</p>

<p>Im Vergleich zu anderen Sprachen, die funktionale Muster <em>zusätzlich</em> zu
imperativen und/oder objektorientierten Mustern anbieten,</p>

<p><label for="def-imperative" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-imperative" class="margin-toggle" />
<span class="marginnote">
Lanugages like Ruby and JavaScript also <em>allow</em> but don’t enforce
the functional style. Leading to the majority of code in these languages
being in imperative.
</span></p>

<p>zeichnet sich Elm dadurch aus, dass es durchgehend dem funktionalen Programmierstil treu bleibt.
Das macht Sie zu einem idealen Kandidaten für Entwickler, die bereits mit
konventionelleren Programmiersprachen vertraut sind vertraut sind und sich auf das Erlernen des
<strong>funktionalen Ansatzes</strong> konzentrieren wollen.</p>

<h2 id="einfachheit">Einfachheit</h2>
<p>Die Eleganz von Elm liegt in seiner Einfachheit. Es ist eine vergleichsweise <em>kleine</em> Sprache. Konkret
bedeutet das, dass es <em>weniger Schlüsselwörter</em> und weniger <em>Konzepte</em> gibt (keine Objektorientierung).
Das bedeutet ganz allgemein <em>weniger Wege, um dasselbe zu erreichen</em>.</p>

<p>Natürlich hat das seinen Preis, und es gibt bestimmte <em>“Meta-Konzepte”</em>, 
die nicht so <em>elegant</em> abstrahiert werden können wie z.B. in Haskell (Elm hat z.B. keine Typklassen).</p>

<p><label for="def-ts" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-ts" class="margin-toggle" />
<span class="marginnote">
<a href="https://www.typescriptlang.org">
    <img src="/assets/posts/a-tour-of-elm/ts.svg" style="width: 15%" alt="TspeScript logo" />
</a><br />
<a href="https://www.typescriptlang.org">TypeScript’s</a>
TypeScript Motto lautet: “TypeScript” ist JavaScript mit einer Syntax für Typen.”
Du musst also JavaScript beherrschen und dann <strong>noch mehr</strong> lernen, um von den
die zusätzlichen Funktionen von TypeScript zu nutzen können.
</span></p>

<p>Aber im Gegenzug ist es viel einfacher, <em>“die ganze”</em> Sprache zu lernen als andere Sprachen wie 
<a href="https://www.typescriptlang.org"><em>TypeScript</em></a>.</p>

<p>Ich glaube, dass “Frontend-Code” <em>einfach und dumm</em> bleiben sollte. Besonders in Webanwendungen
sollte die meiste komplizierte Zahlenspielerei sowieso im Backend erledigt werden. Und dort 
ist man frei, jede beliebige Sprache zu verwenden.</p>

<p>(Ich halte Vorstellung, das die gleiche Sprache im Front- und Backend das Non-plus-Ultra ist für überbewertet,
aber das Thema reicht für einen separaten Blogbeitrag).</p>

<h2 id="unmittelbare-belohnung">Unmittelbare Belohnung</h2>
<p>Ein weiterer Grund, warum ich Experimente gerne in Elm protoype, ist, dass es einfach ist, etwas zu produzieren
mit dem jeder interagieren kann. 
Der übliche Weg, Allzwecksprachen zu lernen, ist, mit Kommandozeilenanwendungen zu beginnen,
die für normale Benutzer nicht zugänglich sind.
Durch die Ausrichtung auf den Browser kannst Du mit nur ein paar Zeilen Code etwas bauen, das <a href="https://elm-visualization.netlify.app/weatherradial/">bunt</a> 
und/oder <a href="https://elm-lang.org/examples/mario">interaktiv</a> ist.</p>

<h2 id="a-tour-of-elm">A Tour of Elm</h2>

<p>Ich freue mich sehr “A Tour of Elm” vorzustellen. Ein Einsteigerkurs für diejenigen
die noch keine Erfahrung mit funktionaler Programmierung oder SPAs haben. 
Am Anfang werden zunächst schnell die Grundlagen durchgehen und wesentliche Konzepte
wie HTML, CSS und JavaScript, die die Grundlage für die SPA-Entwicklung vorgestellt.
Der Kurs geht nahtlos in interaktive Lektionen über und bietet praktische Lektionen 
in verdaulichen Portionen. Und was noch besser ist, Du kannst sofort loslegen
ohne lästige Software-Installation - alles ist direkt im Browser.</p>

<h2 id="fazit">Fazit</h2>

<p>Elm ist nicht nur eine Sprache, sondern auch eine spannende Erfahrung, die darauf wartet, erkundet zu werden. 
Egal, ob Du neu in der funktionalen Programmierung bist oder SPAs meistern willst, die Einfachheit und der Fokus von Elm
machen Elm zum perfekten Begleiter.</p>

<p><a href="https://a-tour-of-elm.axelerator.de">Probier “A Tour of Elm”</a> aus und fange an SPAs mit Spass und Sicherheit zu bauen.</p>

<hr />]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[Wenn Du mit funktionaler Programmierung liebäugelst oder in die Entwicklung von Single Page Applications (SPA) einsteigen willst, gibt es kein besseres Tool als Elm. Elm zeichnet sich als eine Sprache aus, die nicht nur die Entwicklung angenehm macht, sondern auch als perfekter Einstieg in die Welt der funktionalen Programmierung dient.]]></summary></entry><entry xml:lang="en"><title type="html">Discover Functional Programming with Elm</title><link href="https://blog.axelerator.de/development/en/a-tour-of-elm" rel="alternate" type="text/html" title="Discover Functional Programming with Elm" /><published>2023-12-09T14:00:00-05:00</published><updated>2023-12-09T14:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/a-tour-of-elm-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/a-tour-of-elm"><![CDATA[<p><img src="/assets/posts/a-tour-of-elm/elm.webp" width="130" style="float:left; margin: 5px 10px 10px 0" />
If you’ve been eyeing functional programming or diving into Single Page
Application (SPA) development I think no other tool is better suited for you than
<a href="https://elm-lang.org">Elm</a>. It stands out as a language that not only makes development
delightful but also serves as the perfect gateway to the world of functional
programming.</p>

<hr />

<h2 id="statically-typed-bliss">Statically Typed Bliss</h2>

<p>One of Elm’s key charms is, believe it or not, its static typing, a game-changer when compared to
JavaScript. The compiler acts as your trusty sidekick, catching errors before
they wreak havoc at runtime. What sets Elm apart is not just the typing but the
incredible clarity of compiler messages.</p>

<p>Elm isn’t just another functional language; it’s a dedicated tool for building
SPAs. 
If you think in “React terms” it combines</p>

<ul>
  <li><em>TypeScript</em> (language)</li>
  <li><em>NPM</em> (package manager)</li>
  <li><em>React</em> (rendering)</li>
  <li><em>Redux</em> (state management)</li>
</ul>

<p>all in <strong>one single</strong> tool.</p>

<p><label for="def-haskell" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-haskell" class="margin-toggle" />
<span class="marginnote">
<a href="https://www.haskell.org">
<img src="/assets/posts/a-tour-of-elm/haskell-logo.svg" style="width: 35%" alt="Haskell logo" /></a>
was created as a research langugage and as such was explicitly designed
to contain experimental features and syntax.<br />
That leads to many different “styles” which make it hard to learn fast.
</span></p>

<p>The focus on a single target platform (the browser) allows Elm to be simpler than its
general-purpose functional counterparts like 
<a href="https://www.haskell.org">Haskell</a>.</p>

<p>Compared to other languages offering functional features <em>additionally</em> to imperative and/or object oriented patters,
<label for="def-imperative" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-imperative" class="margin-toggle" />
<span class="marginnote">
Lanugages like Ruby and JavaScript also <em>allow</em> but don’t enforce
the functional style. Leading to the majority of code in these languages
being in imperative.
</span></p>

<p>Elm stands out by staying true to the functional programming style throughout.
This makes it an ideal candidate for developers who are already familiar with more 
conventional programming languages and want to focus on learning the <strong>functional approach</strong>.</p>

<h2 id="simplicity">Simplicity</h2>

<p>Elm’s elegance lies in its simplicity. It is a comparatively <em>small</em> language. Concretely
that means there are <em>less keywords</em> and less <em>concepts</em> (no object orientation).
That results just in general in <em>less ways to achieve the same thing</em>.</p>

<p>Of course this comes at a cost and there are certain <em>“meta concepts”</em> that cannot be abstracted
away as <em>elegantly</em> as in for example Haskell (Elm has no type classes for example).</p>

<p>But in return it is just easier to learn “the whole” language than other languages like 
<label for="def-ts" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-ts" class="margin-toggle" />
<span class="marginnote">
<a href="https://www.typescriptlang.org">
    <img src="/assets/posts/a-tour-of-elm/ts.svg" style="width: 15%" alt="TspeScript logo" />
</a><br />
<a href="https://www.typescriptlang.org">TypeScript’s</a>
claim is “TypeScript” is JavaScript with syntax for types.
So you have to master JavaScript and then <strong>learn some more</strong> to benefit from
the additional features of TypeScript.
</span></p>

<p><a href="https://www.typescriptlang.org"><em>TypeScript</em></a>.</p>

<p>I do believe that “frontend code” should stay <em>simple and stupid</em>. Especially in web apps
most of the complicated number wrangling should be done in the backend anyway. And there you
are free to use any language you want.</p>

<p>(I do think the idea that having the same language is highly overrated, but that topic makes
for a complete separate blog post).</p>

<h2 id="instant-gratification">Instant gratification</h2>

<p>Another reason why I love to protoype experiments in Elm is that it easy to produce something
anyone can interact with. 
The usual way to learn general purpose languages is to start with command line applications,
which are not accessible to regular users.
By targeting the browser you can create something that’s <a href="https://elm-visualization.netlify.app/weatherradial/">colorful</a> 
and/or <a href="https://elm-lang.org/examples/mario">interactive</a>
with only a few lines of code.</p>

<h2 id="a-tour-of-elm">A Tour of Elm</h2>

<p>I’m thrilled to share “A Tour of Elm,” a beginner course tailored for those
with no prior experience in functional programming or SPAs. In this
journey, we’ll first quickly go over with the basics, covering essential concepts
like HTML, CSS, and JavaScript that lay the foundation for SPA development. The
course seamlessly progresses with interactive lessons, providing a hands-on Elm
experience in digestible portions. What’s even better? You can dive right in
without the hassle of installing any software – it’s all accessible directly in
your browser.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Elm isn’t just a language; it’s a delightful experience waiting to be explored. 
Whether you’re new to functional programming or eager to master SPAs, Elm’s
simplicity and focus make it the perfect companion. Embrace the joy of coding
with Elm today!</p>

<p><a href="https://a-tour-of-elm.axelerator.de">Check out “A Tour of Elm”</a> and start building SPAs with confidence.</p>

<hr />]]></content><author><name></name></author><category term="elm" /><summary type="html"><![CDATA[If you’ve been eyeing functional programming or diving into Single Page Application (SPA) development I think no other tool is better suited for you than Elm. It stands out as a language that not only makes development delightful but also serves as the perfect gateway to the world of functional programming.]]></summary></entry><entry xml:lang="en"><title type="html">Dynamic Diagrams</title><link href="https://blog.axelerator.de/development/en/liquid-diagrams" rel="alternate" type="text/html" title="Dynamic Diagrams" /><published>2023-11-15T15:00:00-05:00</published><updated>2023-11-15T15:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/liquid-diagrams-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/liquid-diagrams"><![CDATA[<p><img src="/assets/posts/liquid-diagrams/ld.webp" width="130" style="float:right; margin: 5px 10px 10px 0" />
Static images, videos, and SVG animations come each with their own challenges when it comes to 
visualize complex systems through diagrams.
I’ve developed a mini language and web component to add a narrative element to diagrams.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#solutions">Existing solutions</a></li>
  <li><a href="#liquid">A new simple language for interactive diagrams</a></li>
</ul>

<hr />

<p>Technical documentation is an essential component for explaining complex
systems. To effectively represent the relationships between system components,
diagrams have become a staple. However, as systems grow in complexity, so do
their diagrams, often leading to representations that are complicated and
challenging to follow. Additionally, capturing changes over time in static
diagrams presents a significant hurdle.</p>

<style>
    liquid-diagram rect {
        fill: #CCC;
    }
    liquid-diagram path {
        stroke: #333;
    }
    liquid-diagram text {
        font-size: 0.15em;
    }
    liquid-diagram button {
      width: auto;
      font-size: 0.5em;
      line-height: 0.5em;
      margin: 0 0.25em;
    }
    liquid-diagram input[type="range"] {
      flex: 1;
    }

  </style>

<p><label for="def-help" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-help" class="margin-toggle" />
<span class="marginnote">
You can yog through the different states of the diagram using the arrow buttons ⬅ ➡ or the slider.<br />
With the ✏️  button you can view <strong>and</strong> update the source of the diagram.
</span></p>

<figure>
<liquid-diagram style="width: 100%; display: block">
add "A"
  pos 0 -35
  size 20 15
add "B"
  pos -35 5
  size 20 15
add "C"
  pos 20 35
  size 20 15
|- m1 -|
connect "A" "B" "First"
|- - -|
connect "B" "C" "Second"
|- closing the loop -|
connect "C" "A" "Third"
|- dance! -|
update "C"
  pos 0 -35
update "A"
  pos -35 5
update "B"
  pos 20 35
</liquid-diagram>
</figure>

<h3 id="-current-solutions-and-their-limitations"><a name="solutions"></a> Current Solutions and Their Limitations</h3>

<p>Currently, there are a few approaches to address these issues:</p>

<ol>
  <li>
    <p><strong>Multiple Static Images</strong>: Breaking down evolving diagrams into several
static images is common. However, this method can be cumbersome, as it
forces readers to scroll up and down to reference different stages of the
diagram.</p>
  </li>
  <li>
    <p><strong>Video Format</strong>: Using videos to animate diagrams adds a dynamic aspect,
making it easier to understand changes over time. But video production
demands specific skills and often results in large file sizes, which is not
ideal for quick loading web documentation.</p>
  </li>
  <li>
    <p><strong>SVG Animations</strong>: SVG, combined with CSS and JS animations, is another
method to create dynamic diagrams. While promising, this approach requires
technical writers to have specific skills and potentially expensive tools.</p>
  </li>
</ol>

<h3 id="-a-new-simple-language-for-interactive-diagrams"><a name="liquid"></a> A new simple language for interactive diagrams</h3>

<p>Personally, I’ve always been a fan of <label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/liquid-diagrams/mermaid-logo.svg" style="width: 25%; background-color: #888" />
<a href="https://mermaid.js.org">Mermaid</a> is a JavaScript based diagramming and charting tool that renders
Markdown-inspired text definitions to create and modify diagrams dynamically.
</span>
 MermaidJS. Like many developers, I
appreciate how text-based diagram generators strip away much of the complexity
associated with visual tools like <a href="https://inkscape.org">Inkscape or</a> or <a href="https://app.diagrams.net">diagrams.net</a>. 
Text based tools like MermaidJS, have garnered widespread appreciation for their simplicity
and effectiveness. The real charm lies in their ability to convert short,
concise text into elaborate diagrams. This textual approach not only makes
diagram creation easier but also integrates seamlessly with version control
systems, maintaining clear semantics across multiple commits.
If you’re documentation lives as Markdown files on Github you can <a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">embed your diagrams</a> 
without the need to include any additional tools.</p>

<p>Most times, when I set out to create a diagram, I find myself needing just a
few boxes connected by arrows. However, I’ve always yearned for a way to
narrate a story through my diagrams, to gradually introduce elements like boxes
and arrows rather than presenting everything all at once. This led me to
develop a new language and web component that accomplishes exactly this. With
my tool, you can easily build your narrative, adding elements to your diagram
step by step, making the complex information more digestible and engaging.</p>

<p>If you want to try it out feel free to <a href="/assets/js/liquid-diagrams.js">download the webcomponent</a>.
Include it <strong>at the end</strong> of your HTML document after you’ve specified your <code class="language-plaintext highlighter-rouge">liquid-diagram</code> elements.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;liquid-diagram</span> <span class="na">style=</span><span class="s">"display: block"</span><span class="nt">&gt;</span>
add "A"
  pos -10 -7
  size 20 15
add "B"
  pos -35 -35
  size 20 15
|- then -|
connect "A" "B" "A to B"
<span class="nt">&lt;/liquid-diagram&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/liquid-diagrams.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>

<figure>
<liquid-diagram style="display: block">
add "client1"
  pos -30 -35
  size 15 10
|- m1 -|
add "load-balancer"
  pos -10 -5
  size 25 10
add "app-server1"
  pos -30 15
  size 25 10
add "app-server2"
  pos 20 15
  size 25 10
add "db"
  pos -10 35
  size 25 10
|- m2 -|
connect "client1" "load-balancer"
|- m3 -|
connect "load-balancer" "app-server1"
connect "app-server1" "db"
|- m3 -|
add "client2"
  pos 10 -35
  size 15 10
|- m4 -|
connect "client2" "load-balancer"
connect "load-balancer" "app-server2"
connect "app-server2" "db"
</liquid-diagram>
</figure>

<script src="/assets/js/liquid-diagrams.js"></script>]]></content><author><name></name></author><category term="diagrams" /><category term="visualization" /><category term="documentation" /><summary type="html"><![CDATA[Static images, videos, and SVG animations come each with their own challenges when it comes to visualize complex systems through diagrams. I’ve developed a mini language and web component to add a narrative element to diagrams.]]></summary></entry><entry xml:lang="de"><title type="html">Dynamische Diagramme</title><link href="https://blog.axelerator.de/development/de/liquid-diagrams" rel="alternate" type="text/html" title="Dynamische Diagramme" /><published>2023-11-15T15:00:00-05:00</published><updated>2023-11-15T15:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/liquid-diagrams-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/liquid-diagrams"><![CDATA[<p><img src="/assets/posts/liquid-diagrams/ld.webp" width="130" style="float:right; margin: 5px 10px 10px 0" />
Statische Bilder, Videos und SVG-Animationen bringen jeweils ihre eigenen Herausforderungen mit sich, wenn es darum geht 
komplexe Systeme durch Diagramme zu visualisieren.
Ich habe eine Minisprache und eine Webkomponente entwickelt, um Diagrammen ein erzählerisches Element hinzuzufügen.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#solutions">Aktuellen Lösungsansätze und ihre Grenzen</a></li>
  <li><a href="#liquid">Eine neue, einfache Sprache für interaktive Diagramme</a></li>
</ul>

<hr />

<p>Technische Dokumentation ist ein wesentlicher Bestandteil zur Erläuterung komplexer
Systeme. Um die Beziehungen zwischen den Systemkomponenten effektiv darzustellen,
sind Diagramme ein wesetnloches Wergzeug. 
Mit zunehmender Komplexität der Systeme wachsen jedoch auch
die dazugehörigen Diagramme, was oft zu komplizierten und schwer verständlichen Darstellungen führt.
Eine der größten Herausforderungen ist es zeitliche Abläufe verständlich abzubilden.</p>

<style>
    liquid-diagram rect {
        fill: #CCC;
    }
    liquid-diagram path {
        stroke: #333;
    }
    liquid-diagram text {
        font-size: 0.15em;
    }
    liquid-diagram button {
      width: auto;
      font-size: 0.5em;
      line-height: 0.5em;
      margin: 0 0.25em;
    }
    liquid-diagram input[type="range"] {
      flex: 1;
    }

  </style>

<p><label for="def-help" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-help" class="margin-toggle" />
<span class="marginnote">
You can yog through the different states of the diagram using the arrow buttons ⬅ ➡ or the slider.<br />
With the ✏️  button you can view <strong>and</strong> update the source of the diagram.
</span></p>

<figure>
<liquid-diagram style="width: 100%; display: block">
add "A"
  pos 0 -35
  size 20 15
add "B"
  pos -35 5
  size 20 15
add "C"
  pos 20 35
  size 20 15
|- m1 -|
connect "A" "B" "First"
|- - -|
connect "B" "C" "Second"
|- closing the loop -|
connect "C" "A" "Third"
|- dance! -|
update "C"
  pos 0 -35
update "A"
  pos -35 5
update "B"
  pos 20 35
</liquid-diagram>
</figure>

<h3 id="-aktuellen-lösungsansätze-und-ihre-grenzen"><a name="solutions"></a> Aktuellen Lösungsansätze und ihre Grenzen</h3>

<p>Derzeit gibt es einige Ansätze, um diese Probleme zu lösen:</p>

<ol>
  <li>
    <p><strong>Mehrere statische Bilder</strong>: Es ist üblich, sich entwickelnde Diagramme in
mehrere statische Bilder aufzuteilen. Diese Methode kann jedoch umständlich
sein, da sie den Leser zwingt, nach oben und unten zu scrollen, um auf die
verschiedenen Stufen des Diagramms zu verweisen.</p>
  </li>
  <li>
    <p><strong>Video-Format</strong>: Die Verwendung von Videos zur Animation von Diagrammen verleiht
diesen einen dynamischen Aspekt, der es leichter macht, Veränderungen im Laufe
der Zeit zu verstehen. Die Videoproduktion erfordert jedoch besondere
Fähigkeiten und führt oft zu großen Dateien, was für eine schnell ladende
Webdokumentation nicht ideal ist.</p>
  </li>
  <li>
    <p><strong>SVG-Animationen</strong>: SVG, kombiniert mit CSS- und JS-Animationen, ist eine weitere
Methode zur Erstellung dynamischer Diagramme. Dieser Ansatz ist zwar
vielversprechend, erfordert aber vom Autor jedoch spezielle
Fähigkeiten und potenziell teure Tools.</p>
  </li>
</ol>

<h3 id="-eine-neue-einfache-sprache-für-interaktive-diagramme"><a name="liquid"></a> Eine neue, einfache Sprache für interaktive Diagramme</h3>

<p>Ich persönlich war schon immer ein Fan von MermaidJS. Wie viele Entwickler
schätze ich die Tatsache, dass textbasierte Diagrammgeneratoren einen Großteil
der Komplexität wegnehmen, die mit visuellen Tools wie <a href="https://inkscape.org">Inkscape</a> oder
<a href="https://app.diagrams.net">diagrams.net</a> verbunden ist.</p>

<p>Textbasierte tools wie MermaidJS, werden wegen
ihrer Einfachheit und Effektivität sehr geschätzt. Der eigentliche Charme liegt
in ihrer Fähigkeit, kurzen, prägnanten Text in ausgefeilte Diagramme zu
verwandeln. Dieser textuelle Ansatz erleichtert nicht nur die Erstellung von
Diagrammen, sondern lässt sich auch nahtlos in Versionskontrollsysteme
integrieren, so dass eine klare Semantik über mehrere Übertragungen hinweg
erhalten bleibt.
Wenn deine Dokumentation in Form von Markdown Dokumenten bei Github liegt kannst du 
<a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">Diagramme direkt einbinden</a> 
ohne weitere Werkzeuge zu benötigen.</p>

<p>Wenn ich ein Diagramm erstellen will, brauche ich meistens nur ein paar
Kästchen, die durch Pfeile verbunden sind. Ich habe mich jedoch immer nach
einer Möglichkeit gesehnt, mit meinen Diagrammen eine Geschichte zu erzählen,
Ich möchte Elemente wie Kästchen und Pfeile gerne <strong>nach und nach</strong> einzuführen, anstatt alles auf
einmal zu präsentieren. Das hat mich dazu veranlasst, eine neue Sprache und
eine Webkomponente zu entwickeln, mit der genau das möglich ist. 
Mit meinem Tool kann ich meine Erzählung langsam aufbauen, indem ich dem Diagramm
Schritt für Schritt Elemente hinzufüge und so die komplexen Informationen
verständlicher und ansprechender machen kann.</p>

<p>Wenn du interaktive Diagramme auf deiner Seite haben möchtest <a href="/assets/js/liquid-diagrams.js">lade die Webkomponente runter</a>.
Binde sie <strong>am Ende</strong> deiner Seite ein <strong>nachdem</strong> du die <code class="language-plaintext highlighter-rouge">liquid-diagram</code> Elemente speyifiziert hast.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;liquid-diagram</span> <span class="na">style=</span><span class="s">"display: block"</span><span class="nt">&gt;</span>
add "A"
  pos -10 -7
  size 20 15
add "B"
  pos -35 -35
  size 20 15
|- then -|
connect "A" "B" "A to B"
<span class="nt">&lt;/liquid-diagram&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/liquid-diagrams.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>

<figure>
<liquid-diagram style="display: block">
add "client1"
  pos -30 -35
  size 15 10
|- m1 -|
add "load-balancer"
  pos -10 -5
  size 25 10
add "app-server1"
  pos -30 15
  size 25 10
add "app-server2"
  pos 20 15
  size 25 10
add "db"
  pos -10 35
  size 25 10
|- m2 -|
connect "client1" "load-balancer"
|- m3 -|
connect "load-balancer" "app-server1"
connect "app-server1" "db"
|- m3 -|
add "client2"
  pos 10 -35
  size 15 10
|- m4 -|
connect "client2" "load-balancer"
connect "load-balancer" "app-server2"
connect "app-server2" "db"
</liquid-diagram>
</figure>

<script src="/assets/js/liquid-diagrams.js"></script>]]></content><author><name></name></author><category term="diagrams" /><category term="visualization" /><category term="documentation" /><summary type="html"><![CDATA[Statische Bilder, Videos und SVG-Animationen bringen jeweils ihre eigenen Herausforderungen mit sich, wenn es darum geht komplexe Systeme durch Diagramme zu visualisieren. Ich habe eine Minisprache und eine Webkomponente entwickelt, um Diagrammen ein erzählerisches Element hinzuzufügen.]]></summary></entry><entry xml:lang="en"><title type="html">htmx vs. SPA</title><link href="https://blog.axelerator.de/development/en/htmx-vs-spa" rel="alternate" type="text/html" title="htmx vs. SPA" /><published>2023-11-05T17:00:00-05:00</published><updated>2023-11-05T17:00:00-05:00</updated><id>https://blog.axelerator.de/development/en/htmx-vs-spa-en</id><content type="html" xml:base="https://blog.axelerator.de/development/en/htmx-vs-spa"><![CDATA[<p><img src="/assets/posts/htmx-vs-spa/scientist_caveman.jpg" width="130" height="130" style="float:left; margin: 5px 10px 10px 0" />
As web developers, it’s our responsibility to discern the best tool for the
job. htmx indeed simplifies the tech stack and lowers the entry barrier for
budding developers or simpler projects. However, for intricate UIs that demand
consistent data representation, the SPA approach offers better support. Rather
than getting swayed by trends, it’s time we appreciated the nuance in these
discussions and chose our tools wisely.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#hype">The htmx hype</a></li>
  <li><a href="#simplicity">Simplicity is relative</a></li>
  <li><a href="#tool">The Right Tool for the Job</a></li>
</ul>

<hr />

<p><label for="def-spa" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-spa" class="margin-toggle" />
<span class="marginnote">
A <a href="https://en.wikipedia.org/wiki/Single-page_application">single-page application (SPA)</a> is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages.
</span></p>

<p>The technology landscape is ever-evolving, and in the realm of web development,
nothing has generated more buzz recently than <strong>htmx</strong>. As web developers, we’ve
seen a myriad of technologies and practices come into the spotlight, only to
fade into obscurity when something better comes along. The current fanfare
around htmx is testament to this cycle, with many praising its ability to
simplify the process of crafting interactive HTML pages. But as with all tech
discussions, it’s crucial to introduce some nuance, especially when comparing
htmx to  Single Page Applications (SPAs).</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 50%" /><br />
<a href="https://htmx.org/docs/">htmx</a> is a library that allows you to access modern browser features directly from HTML, rather than using javascript.
</span></p>

<h3 id="-the-htmx-hype"><a name="htmx"></a> The htmx Hype</h3>

<p>htmx offers a refreshing take on web app development. It brings in a tangible
simplicity to the tech stack, reducing the need for multiple languages and
eliminating certain build tools. This is a measurable simplicity that appeals
to developers who want a straightforward approach to interactive web
components.</p>

<p>That said, the rise of htmx has also ushered in a wave of criticism towards
SPAs, painting them as overcomplicated and cumbersome. But it’s essential to
recognize that simplicity isn’t universal; what’s simple in one context might
be complex in another.</p>

<h3 id="-simplicity-is-relative"><a name="simplicity"></a> Simplicity is relative</h3>

<p>While htmx champions the simplicity of the tech stack, SPAs champion a 
different kind of simplicity - the simplicity of UI state management.</p>

<p>The <a href="https://guide.elm-lang.org/architecture/">Elm architecture</a>, for instance, ensures a clear derivation of UI state from
<strong>a single data source</strong>. Such a setup helps with consistent reflection of data across
the user interface.</p>

<p>I’m sure you’ve run into the following bug on even bigger web platforms:</p>

<p>In the top-right corner there is a counters that displays the number of unread messages. 
You’re following a link to an unread message, just not through that very counter.
But now that counter fails to update unless the whole page is refreshed.</p>

<p>With a dedicated data model for the UI, there’s a heightened confidence in producing user interfaces that
consistently reflect accurate data.</p>

<p>Now, this isn’t to say that SPAs guarantee flawless UIs, but the foundational
architecture gives developers a more robust framework to ensure UI consistency.</p>

<h3 id="-the-right-tool-for-the-job"><a name="tool"></a> The Right Tool for the Job</h3>

<p>The discussion between htmx and SPA shouldn’t be about which is universally
better; it should be about understanding the strengths and limitations of each.
htmx sets a lower entry barrier for those looking to get started with web apps.
It’s brilliant for projects that require less intricate user interfaces, like a
simple signup form for a newsletter.</p>

<p>On the other hand, for complex, interactive UIs where consistent data
representation is crucial, the SPA approach, especially with frameworks like
Elm, offers a more reliable structure.</p>

<p>The most common criticism of SPAs is how complicated they are to work with. 
In the following video I show how you can set up an SPA setup within a few minutes, 
without the usage of NPM, Webpack and actually even without JavaScript.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/xLUpTaI1oE0?si=M0CGBqFvMQOOMzoy" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="webdevelopment" /><category term="htmx" /><category term="spa" /><category term="elm" /><summary type="html"><![CDATA[As web developers, it’s our responsibility to discern the best tool for the job. htmx indeed simplifies the tech stack and lowers the entry barrier for budding developers or simpler projects. However, for intricate UIs that demand consistent data representation, the SPA approach offers better support. Rather than getting swayed by trends, it’s time we appreciated the nuance in these discussions and chose our tools wisely.]]></summary></entry><entry xml:lang="de"><title type="html">htmx vs. SPA</title><link href="https://blog.axelerator.de/development/de/htmx-vs-spa" rel="alternate" type="text/html" title="htmx vs. SPA" /><published>2023-11-05T17:00:00-05:00</published><updated>2023-11-05T17:00:00-05:00</updated><id>https://blog.axelerator.de/development/de/htmx-vs-spa-de</id><content type="html" xml:base="https://blog.axelerator.de/development/de/htmx-vs-spa"><![CDATA[<p><img src="/assets/posts/htmx-vs-spa/scientist_caveman.jpg" width="130" style="float:left; margin: 5px 10px 10px 0" />
Als Webentwickler liegt es in unserer Verantwortung, das beste Werkzeug für die
jeweilige Aufgabe zu finden. htmx vereinfacht in der Tat den technischen Stack
und senkt die Einstiegshürde für angehende Entwickler oder einfachere Projekte.
Für komplizierte Benutzeroberflächen, die eine konsistente Darstellung der Daten
erfordern, bietet der SPA-Ansatz jedoch eine bessere Unterstützung. Anstatt
sich von Trends beeinflussen zu lassen, sollten wir die
Nuancen in diesen Diskussionen anerkennen und unsere Tools mit Bedacht auswählen.</p>

<hr />

<p>Inhalt:</p>

<ul>
  <li><a href="#hype">Der htmx Hype</a></li>
  <li><a href="#simplicity"><em>Einfach</em> ist realtive</a></li>
  <li><a href="#tool">Das passende Werkzeug für den Job </a></li>
</ul>

<hr />

<p><label for="def-spa" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-spa" class="margin-toggle" />
<span class="marginnote">
Eine <a href="https://en.wikipedia.org/wiki/Single-page_application">single-page application (SPA)</a>
wird eine Webanwendung bezeichnet, die aus einem einzigen HTML-Dokument besteht und deren Inhalte dynamisch nachgeladen werden.
</span></p>

<p>Die Technologielandschaft entwickelt sich ständig weiter, und im Bereich der
Webentwicklung hat in letzter Zeit nichts mehr Aufsehen erregt als <em>htmx</em>. Als
Webentwickler erleben wir kontinuierliech, wie eine Vielzahl von Technologien und
Praktiken ins Rampenlicht gerückt wurden, nur um dann wieder in der Versenkung zu
verschwinden, wenn etwas Besseres auftaucht. Der derzeitige Hype um htmx ist
ein Beleg für diesen Zyklus, und viele loben seine Fähigkeit, den Prozess der
Erstellung interaktiver HTML-Seiten zu vereinfachen. Aber wie bei allen
technischen Diskussionen ist es wichtig zu differenzieren, besonders
wenn man htmx mit Single Page Applications (SPAs) vergleicht.</p>

<p><label for="def-htmx" class="margin-toggle">⊕</label>
<input type="checkbox" id="def-htmx" class="margin-toggle" />
<span class="marginnote">
<img src="/assets/posts/htmx-vs-spa/htmx.svg" style="width: 50%" /><br />
<a href="https://htmx.org/docs/">htmx</a> ist eine JavaScript Bibliothek die es, erlaubt
moderne Browserfunktionen direkt von HTML aus zuzugreifen, anstatt Javascript
zu verwenden.
</span></p>

<h3 id="-der-htmx-hype"><a name="htmx"></a> Der htmx hype</h3>

<p>htmx bietet einen erfrischenden Ansatz für die Entwicklung von Webanwendungen.
Es bringt eine nachweisliche Einfachheit in den Tech-Stack, reduziert den Bedarf an
mehreren Sprachen und eliminiert bestimmte Build-Tools. Diese messbare
Einfachheit spricht Entwickler an, die einen geradlinigen Ansatz für
interaktive Webseiten suchen.</p>

<p>Allerdings hat der Aufstieg von htmx auch eine Welle der Kritik an SPAs
ausgelöst, die sie als zu kompliziert und schwerfällig darstellen. Es ist
jedoch wichtig anzuerkennen, dass Einfachheit nicht universell ist; was in einem
Kontext einfach ist, kann in einem anderen komplex sein.</p>

<h3 id="-einfach-ist-relativ"><a name="simplicity"></a> <em>Einfach</em> ist relativ</h3>

<p>Während htmx für die Einfachheit des technischen Stacks optimiert, setzen SPAs
auf eine andere Art von Einfachheit - die Einfachheit des UI-Zustnadnds-Managements.</p>

<p>Die <a href="https://guide.elm-lang.org/architecture/">Elm-Architektur</a> 
beispielsweise gewährleistet eine klare Ableitung der
Darstellung aus einer einzigen Datenquelle. Ein solches Setup hilft bei der
konsistenten Widerspiegelung von Daten in der gesamten Benutzeroberfläche.</p>

<p>Ich bin mir sicher, dass Du auch auf größeren Webplattformen schon einmal auf
den folgenden Fehler gestoßen sind:</p>

<p>In der oberen rechten Ecke befindet sich ein Zähler, der die Anzahl der
ungelesenen Nachrichten anzeigt. Du folgst einem Link zu einer ungelesenen
Nachricht, nur nicht über genau diesen Zähler. Nun wird dieser Zähler aber nur
dann aktualisiert, wenn die gesamte Seite neu geladen wird.</p>

<p>Mit einem dedizierten Datenmodell für die Benutzeroberfläche steigt das
Vertrauen Benutzeroberflächen bauen zu können, die konsistent genaue
Daten wiedergeben.</p>

<p>Das soll nicht heißen, dass SPAs eine Garantie für fehlerfreie
Benutzeroberflächen sind, aber die grundlegende Architektur bietet Entwicklern
einen robusteren Rahmen, um die Konsistenz der Benutzeroberfläche zu
gewährleisten.</p>

<h3 id="-das-richtige-werkzeug-für-die-aufgabe"><a name="tool"></a> Das richtige Werkzeug für die Aufgabe</h3>

<p>Bei der Diskussion zwischen htmx und SPA sollte es nicht darum gehen, welches
Tool <em>“auf der Welt”</em> ist, sondern darum, die Stärken und Grenzen der beiden zu
verstehen.
htmx setzt eine niedrigere Einstiegshürde für diejenigen, die mit
einfachen Webanwendungen beginnen wollen. Es eignet sich hervorragend für Projekte, die
weniger komplizierte Benutzeroberflächen erfordern, wie zum Beispiel ein einfaches
Anmeldeformular für einen Newsletter.
Für komplexe, interaktive Benutzeroberflächen, bei denen eine konsistente Datendarstellung entscheidend
ist, bietet der SPA-Ansatz, insbesondere mit Frameworks wie Elm, eine zuverlässigere Struktur.</p>

<p>Die häufigste Kritik an SPAs is wie <em>kompliziert</em> sie sind. In dem foglenden Video zeige
ich wie man inerhalb weniger Minuten ein SPA setup aufsetzen kann, ganz ohne <em>NPM</em>, <em>Webpack</em>
und eigentlich sogar ohne JavaScript.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/xLUpTaI1oE0?si=M0CGBqFvMQOOMzoy" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="webdevelopment" /><category term="htmx" /><category term="spa" /><category term="elm" /><summary type="html"><![CDATA[Als Webentwickler liegt es in unserer Verantwortung, das beste Werkzeug für die jeweilige Aufgabe zu finden. htmx vereinfacht in der Tat den technischen Stack und senkt die Einstiegshürde für angehende Entwickler oder einfachere Projekte. Für komplizierte Benutzeroberflächen, die eine konsistente Darstellung der Daten erfordern, bietet der SPA-Ansatz jedoch eine bessere Unterstützung. Anstatt sich von Trends beeinflussen zu lassen, sollten wir die Nuancen in diesen Diskussionen anerkennen und unsere Tools mit Bedacht auswählen.]]></summary></entry><entry xml:lang="en"><title type="html">Building in the open</title><link href="https://blog.axelerator.de/business/en/building-in-the-open" rel="alternate" type="text/html" title="Building in the open" /><published>2023-10-19T18:00:00-04:00</published><updated>2023-10-19T18:00:00-04:00</updated><id>https://blog.axelerator.de/business/en/building-in-the-open-en</id><content type="html" xml:base="https://blog.axelerator.de/business/en/building-in-the-open"><![CDATA[<p><img src="/assets/posts/building-in-the-open/features.svg" width="130" height="130" style="float:right; margin: 5px 10px 10px 0" />
Join me as I embark on a transparent journey to develop a digital filing cabinet that prioritizes your privacy.
Using my years of experience in web development, I aim to craft a solution that bridges the gap between convenience and data security, 
all while sharing each step of the process with you. 
Follow along for live coding sessions, insights, and the chance to shape a product designed for individuals, families, and SMEs alike.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#who">Who is this for?</a></li>
  <li><a href="#usp">This is what I’m building</a></li>
  <li><a href="#building">If you build it, <del>they will come</del> nobody cares</a></li>
</ul>

<hr />

<p><a name="intro"></a></p>

<p>I started web development in the last millennium with the help of a website called 
<label for="selfhtml" class="margin-toggle">⊕</label>
<input type="checkbox" id="selfhtml" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/selfhtml.jpg" alt="Selfhtml.de in 1998" /><br />
    Screenshot of SelfHtml.de from 1998 taken with the 
    <a href="https://web.archive.org/web/20000915151937/http://www.netzwelt.com/selfhtml/tcab.htm">WaybackMachine</a>
</span>
 <a href="https://wiki.selfhtml.org/">SELFHTML</a></p>

<p>I ran my own <a href="https://www.fortytools.com/">software company</a> with two friends in Germany for nearly a decade. 
And then, five years ago, after I moved to Canada to work for Shopify.
I’m currently enjoying some free time between jobs and want to use these months to 
spin up a product/business as a solo entrepreneur with an idea I’ve been thinking about for nearly ten years.</p>

<p>Here is the problem I want to solve with my software:</p>

<p><label for="unread" class="margin-toggle">⊕</label>
<input type="checkbox" id="unread" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/unread.svg" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" />
</span></p>

<blockquote>
  <p>You get a notification about an new e-mail. You open it and at a glance you can tell it’s important and have to <strong>act</strong> on it.</p>

  <p>But you don’t have the time to do it <strong>right now</strong>.</p>

  <p>So you leave it marked as <em>unread</em>.</p>
</blockquote>

<p>I do this with physical mail too – And it is a nightmare. I end up with stacks of unopened letters scattered through my apartment. Some of them urgent, some of them
important, some of them both, some of them none of it.</p>

<p>And then comes the dreaded moment where I have to find that <strong>one letter</strong>.</p>

<p>I never committed to an existing software because these days this most likely means I have to give a very complete 
picture of my personal life. Additionally</p>

<ul>
  <li>I can only maintain access to my data as long as I pay them a monthly fee</li>
  <li>They will potentially use/sell my data</li>
  <li>They might give generous access to government(s) agencies</li>
  <li>Might be accessed by third parties through a data leak</li>
</ul>

<p>While there are alternatives like <em>Paperless</em> <label for="paperless" class="margin-toggle">⊕</label>
<input type="checkbox" id="paperless" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/paperless.png" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" /><br />
    <a href="https://github.com/paperless-ngx/paperless-ngx">Paperless</a> is a self hosted open-source document management system.
</span>
 it is only accessible to people who are already well versed in
hosting their own servers.</p>

<p>I want to solve this problem for myself as well as non-technical people. Hitting the right spot between ease-of-use, level of privacy and cost to operate is 
always an trade off based on ones current situation. Knowing this I will be building a software that allows users to choose a compromise that suits <em>their</em> needs
and change their mind over time.</p>

<h3 id="-who-is-this-for"><a name="who"></a> Who is this for?</h3>

<p>I’ve talked to a lot of friends and family and a lot of people struggle with <em>document management</em> in similar ways. Not surprisingly the amount of important 
mail multiplies once you start a family and you receive documents that you have to manage on behalf of your children.</p>

<p>So while the <em>MVP</em> <label for="mvp-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="mvp-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Minimum_viable_product" title="Check out the definition on Wikipedia">MVP</a> stands for <em>“Minimum Viable Product”</em>
</span>
 that I will build in the beginning
will focus on individuals a <strong>multiuser</strong> concept will be part of the foundations software design.</p>

<p>To some degree a solution of this problem could be even applied to SMEs <label for="sme-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="sme-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Small_and_medium-sized_enterprises" title="Check out the definition on Wikipedia">SME</a> stands for <em>“Small and medium-sized enterprises”</em>
</span>
.
For example at Fortytools we were between 15-20 people and had a lot going on between our own SaaS and our contracting business. We had enough <em>paperwork</em> to deal
with to employ someone. And documents often had to retrieved, processed and shared with other users.</p>

<h3 id="-this-is-what-im-building"><a name="usp"></a> This is what I’m building</h3>

<p>The core of the software I am going to build can best be described as a digital filing cabinet. That in itself is not especially novel, but I was surprised at
how few solutions there are that do not satisfy my personal requirements for such a solution.</p>

<p><em>“Data privacy”</em> is the least interesting feature in any software until someone 
gets access to you data who is not supposed to. Which happens a lot more often than you think!</p>

<p><img src="/assets/posts/building-in-the-open/breaches23.svg" alt="data breaches" /></p>

<p>Giving your data to a <em>SaaS</em> <label for="saas-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="saas-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a> Software as a service is a software licensing and delivery model in which software is licensed on a subscription basis and is centrally hosted.
</span>
 provider is certainly the most convenient. It’s also arguably likely to loose your data when you rely
on the backup tools of a cloud provider than managing external disks and thumb drives.</p>

<p>However not all SaaS providers are set up equally and there are a lot of data breaches each year. Larger companies are usually good
at protecting your data against unauthorized access. However if your are <em>not</em> paying a significant price tag, for example for Google Drive,
the provider will use your data in one way or another to monetize their project. Yes they will look <strong>into</strong> files. If you create
a comparison Google Sheet for Baby strollers, you <strong>will</strong> get ads of baby products.</p>

<p>So I want to make <strong>privacy</strong> a major concern and allow you to run the software without any connection to the internet.
<strong>But</strong> I also want to make the software as easily accessible as possible.
So I will launch the software in different <em>variants</em> that allows you to pick your sweet sweet spot between <em>privacy</em> and <em>comfort</em>.</p>
<div id="variants"></div>

<p>And most importantly I will make it <strong>easy to switch</strong> between these. One of the main technical ingredients to achieve this is to store
everything in <em>files</em>. Documents will be stored <em>by year</em> and <em>by month</em>. An extremely simple scheme that will be manageable even if you
stop using the software altogether.</p>

<div id="features"></div>

<h3 id="-if-you-build-it-they-will-come-nobody-cares"><a name="building"></a> If you build it, <del>they will come</del> nobody cares</h3>

<p>There is this platitude about how it’s not enough to just build a good product.
The gist is that you should start starting marketing &amp; sales activities as soon as you start building.</p>

<p>And the reason this is still being told is that especially solo developers are likely to fall into this trap.
There is a high temptation wanting the first release to be perfect, wanting to add just one more feature..
Another catalyst for this line of thinking/feeling is that it’s better to start with a “big bang”.</p>

<p>It’s been proven over and over again that this is <strong>not</strong> the case.
So to avoid falling into this trap I decided to <strong>“build in the open”</strong> from the start.</p>

<p>Practically that means I’m going to stream live on Twitch as I write the first lines of code.
I’ll be happy to answer questions and will be talking in more detail about some of technical
decisions for this project.</p>

<p>Watching live coding sessions is not always most captivating and I also want to share non-technical challenges
along the way. So I will also build other channels (more blog posts Instagram, Youtube, Podcast, Newsletter). I’m also 
interested in learning from other peoples journey.</p>

<p>So if you’re interested in following my journey I’d love to send you my weekly newsletter where I share recent progress.</p>

<div id="subscribe"></div>

<link rel="stylesheet" href="/assets/interactive/styles.css" />

<script src="/assets/interactive/interactive.js"></script>

<script>
  var variants = Elm.Interactive.init({
    node: document.getElementById('variants'),
    flags: { kind: "Variants", lang: "en" }
  });

  var features = Elm.Interactive.init({
    node: document.getElementById('features'),
    flags: { kind: "Features" , lang: "en" }
  });

  var subscribe = Elm.Interactive.init({
    node: document.getElementById('subscribe'),
    flags: { kind: "Subscribe" }
  });
</script>]]></content><author><name></name></author><category term="solopreneur" /><category term="business" /><summary type="html"><![CDATA[Join me as I embark on a transparent journey to develop a digital filing cabinet that prioritizes your privacy. Using my years of experience in web development, I aim to craft a solution that bridges the gap between convenience and data security, all while sharing each step of the process with you. Follow along for live coding sessions, insights, and the chance to shape a product designed for individuals, families, and SMEs alike.]]></summary></entry><entry xml:lang="de"><title type="html">Bauen im Freien</title><link href="https://blog.axelerator.de/business/de/building-in-the-open" rel="alternate" type="text/html" title="Bauen im Freien" /><published>2023-10-19T18:00:00-04:00</published><updated>2023-10-19T18:00:00-04:00</updated><id>https://blog.axelerator.de/business/de/building-in-the-open-de</id><content type="html" xml:base="https://blog.axelerator.de/business/de/building-in-the-open"><![CDATA[<p><img src="/assets/posts/building-in-the-open/features.svg" width="130" height="130" style="float:right; margin: 5px 10px 10px 0" />
Begleite mich wie ich meinen <em>digitalen Aktenschrank</em> und mein 1-Mann-Startup darum in der Öffentlichkeit baue.
Mit langjähriged Erfahrungen in der Softwareentwicklung strebe ich an, eine Lösung zu schaffen, die die Lücke zwischen Bequemlichkeit und Datensicherheit schließt,
während ich jeden Schritt des Prozesses mit Dir teile.</p>

<p>Verfolge Livecoding Sessions, Erkenntnisse und die Möglichkeit, ein Produkt mitzugestalten, das für Einzelpersonen,
Familien und KMUs gleichermaßen konzipiert ist.</p>

<hr />

<p>Content:</p>

<ul>
  <li><a href="#intro">Intro</a></li>
  <li><a href="#who">Für wen?</a></li>
  <li><a href="#usp">Das wird gebaut</a></li>
  <li><a href="#building">If you build it, <del>they will come</del> nobody cares</a></li>
</ul>

<hr />

<p><a name="intro"></a></p>

<p>Ich habe mit der Webentwicklung im letzten Jahrtausend begonnen,
und zwar mit Hilfe einer Website namens <label for="selfhtml" class="margin-toggle">⊕</label>
<input type="checkbox" id="selfhtml" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/selfhtml.jpg" alt="Selfhtml.de in 1998" /><br />
    Screenshot of SelfHtml.de from 1998 taken with the 
    <a href="https://web.archive.org/web/20000915151937/http://www.netzwelt.com/selfhtml/tcab.htm">WaybackMachine</a>
</span>
 <a href="https://wiki.selfhtml.org/">SELFHTML</a> im Jahr 1998.</p>

<p>Fast ein Jahrzehnt lang habe ich in Deutschland gemeinsam mit zwei Freunden mein eigenes <a href="(https://www.fortytools.com/)">Softwareunternehmen</a> geführt.
Vor fünf Jahren bin ich dann nach Kanada gezogen, 
um bei Shopify zu arbeiten. 
Derzeit genieße ich etwas Freizeit zwischen den Jobs und möchte diese Monate nutzen,
um als Solo-Unternehmer ein Produkt/Geschäft aufzubauen - eine Idee, über die ich seit fast zehn Jahren nachdenke.</p>

<p>Hier ist das Problem, das ich mit meiner Software lösen möchte:</p>

<p><label for="unread" class="margin-toggle">⊕</label>
<input type="checkbox" id="unread" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/unread.svg" style="width: 5em" alt="Mail logo mit einer hohen Anzahl ungelesener E-Mails" />
</span></p>

<blockquote>
  <p>De bekommst eine Benachrichtigung über eine neue E-Mail. Du öffnest sie und erkennst sofort, 
dass sie wichtig ist und Du darauf reagieren musst.</p>

  <p>Aber Du hast jetzt keine Zeit dafür.</p>

  <p>Also läst Du sie als ungelesen markiert.</p>
</blockquote>

<p>Mir geht es mit physischer Post genauso – und es ist ein Albtraum. 
Ich habe Stapel ungeöffneter Briefe in meiner Wohnung.
Einige davon sind dringend, andere wichtig, manche beides, manche keins von beidem.</p>

<p>Und dann kommt der gefürchtete Moment, in dem ich diesen <strong>einen</strong> Brief finden muss.</p>

<p>Ich konnte mich nie für eine bestehende Software entscheiden, 
weil dies heutzutage höchstwahrscheinlich bedeutet, dass ich einem Cloud-Software-Anbieter 
ein sehr vollständiges Bild meines persönlichen Lebens geben muss.</p>

<p>Dazu kommt:</p>

<ul>
  <li>ich muss einen monatlichen Beitrag zahlen um weiter auf meine Daten zugreifen zu können</li>
  <li>der Anbieter verkauft Teile meiner Daten für zusätzlichen Profit</li>
  <li>der Anbieter teilt Daten großzügig mit Behörden im In- und Ausland</li>
  <li>der Anbieter wird Ziel eines Hackerangriffs und meine Daten gelangen in die Hände Unbefugter</li>
</ul>

<p>While there are alternatives like <em>Paperless</em>  it is only accessible to people who are already well versed in
hosting their own servers.</p>

<p>Es gibt zwar Open-Source Alternativen wie <label for="paperless" class="margin-toggle">⊕</label>
<input type="checkbox" id="paperless" class="margin-toggle" />
<span class="marginnote">
    <img src="/assets/posts/building-in-the-open/paperless.png" style="width: 5em" alt="Mail logo indicating a lot of unreal e-mails" /><br />
    <a href="https://github.com/paperless-ngx/paperless-ngx">Paperless</a> ist eine selbst gehostete Dokumenten Management Lösung.
</span>
 <em>Paperless</em>,
diese sind aber häufig nur für Leute zugänglich die sich im Betrieb von Server auskennen.</p>

<p>Ich möchte dieses Problem für mich selbst sowie für technisch weniger versierte Personen lösen.
Es ist immer ein Kompromiss zwischen Benutzerfreundlichkeit, Datenschutz und Betriebskosten. 
Mein Ziel ist es eine Software entwickeln, die es den Benutzern ermöglicht, einen Kompromiss zu wählen,
der ihren Bedürfnissen entspricht, und im Laufe der Zeit ihre Meinung zu ändern.</p>

<h3 id="-für-wen"><a name="who"></a> Für wen?</h3>

<p>Ich habe mit vielen Freunden und Familienmitgliedern gesprochen,
und die meisten haben ähnliche Probleme mit der Dokumentenverwaltung.
Und sobald man eine Familie gründet kommt eine Menge an wichtiger Post steigt,
, die man im Namen seiner Kinder verwalten muss dazu.</p>

<p>Der <label for="mvp-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="mvp-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://de.wikipedia.org/wiki/Minimum_Viable_Product">MVP</a> steht für <em>“Minimum Viable Product”</em>
</span>
 MVP, den ich zu Beginn entwickeln werde,
wird sich also auf Einzelpersonen konzentrieren, aber ein Multiuser-Konzept wird Teil des Software-Designs sein.</p>

<p>In gewissem Maße könnte eine Lösung dieses Problems sogar auf <label for="sme-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="sme-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://de.wikipedia.org/wiki/Kleine_und_mittlere_Unternehmen">KMU</a> steht für r <em>“Kleine und mittlere Unternehmen”</em>
</span>
KMU angewendet werden.
Zum Beispiel waren wir bei Fortytools zwischen 15-20 Personen und hatten mit unserem 
eigenen Produkt und Entwicklungsarbeit für andere Unternehmen viel zu tun. 
Wir hatten genug Papierkram zu erledigen, um jemanden einzustellen. 
Dokumente mussten oft abgerufen, verarbeitet und mit anderen Benutzern geteilt werden.</p>

<h3 id="-this-is-what-im-building"><a name="usp"></a> This is what I’m building</h3>

<p>Das Herzstück der Software, die ich entwickeln werde,
lässt sich am besten als digitales Aktenschrank beschreiben.
Das ist an sich nichts Neues, aber ich war überrascht,
wie wenige Lösungen es gibt, die meinen persönlichen Anforderungen an eine solche Lösung nicht gerecht werden.</p>

<p>“Datenschutz” ist ein Feature in jeder Software, aber normalerweise nicht eines über das irgendjemand aufgeregt ist.</p>

<p>Bis jemand Zugriff auf Daten erhält, der das nicht sollte. 
Und das passiert viel häufiger, als man denkt!</p>

<p><img src="/assets/posts/building-in-the-open/breaches23.svg" alt="Datatenpannen 2023" /></p>

<p>Deine Daten einem SaaS <label for="saas-def" class="margin-toggle">⊕</label>
<input type="checkbox" id="saas-def" class="margin-toggle" />
<span class="marginnote">
<a href="https://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a> Software und die bei einem externen IT-Dienstleister betrieben und vom Kunden als Dienstleistung genutzt werden kann.
</span>
 Anbieter zu geben, ist sicherlich am bequemsten.
Dort sind sie vermutlich auch besser gegen Verlust geschützt als sich auf manuelle Backups zu verlassen.</p>

<p>Allerdings sind nicht alle SaaS-Anbieter gleich aufgestellt und es gibt jedes Jahr viele Datenverletzungen. 
Größere Unternehmen sind in der Regel gut darin, Ihre Daten vor unbefugtem Zugriff zu schützen. 
Bei günstigen Lösungen, zum Beispiel Google Drive, wird der Anbieter Deine Daten auf die eine oder andere Weise nutzen, 
um ihr Projekt zu monetarisieren. Ja, sie werden in Deine Dateien schauen. 
Wenn Du zum Beispiel eine Tabelle in Google Sheets zum Vergleich für Kinderwagen hast, 
wurst Du in den nächsten Tagen Werbung für Babyprodukte erhalten.</p>

<p>Ich werde in meiner Lösung den Datenschutz zu einem zentralen Anliegen machen und 
es ermöglichen, die Software ohne jegliche Internetverbindung zu betreiben.</p>

<p>Aber ich möchte auch, dass die Software so zugänglich wie möglich ist. 
Daher werde ich die Software in verschiedenen Varianten anbieten, die es ermöglichen, 
den perfekten Mittelweg zwischen Datenschutz und Komfort zu wählen.</p>

<div id="variants"></div>

<p>Am wichtigsten für dieses Modell ist, dass es <strong>einfach</strong> ist zwischen diesen <strong>Varianten zu wechseln</strong>.
Der Kernidee dieses zu ermöglichen ist alle Informationen in einfachen Dateien zu speichern anstatt auf 
eine Datenbank zu setzen.</p>

<p>Diese Dateien werden nach einem einfachen Schema (Jahr/Monat) in Ordern abgelegt. Diese ermöglichtes Dokumente
wiederzufinden selbst wenn man aufgehört hat meine Anwendung zu benutzen.</p>

<div id="features"></div>

<h3 id="-if-you-build-it-they-will-come-nobody-cares"><a name="building"></a> If you build it, <del>they will come</del> nobody cares</h3>

<p>Heißt so viel wie</p>

<blockquote>
  <p>Wenn du es baust,
<del>werden sie schon kommen</del></p>

  <p>interessiert es kein Schwein.</p>
</blockquote>

<p>Es spiegelt die, besonderns bei Entwicklern verbreitete, Idee wider, dass man lediglich ein gutes Produkt bauen muss und es
sich dann schon rumspricht. Eine anderer Versuchung ist es das Produkt vor der Veröffentlichung zu perfektionieren, um
mit einem <em>“Big Bang”</em> zu starten.</p>

<p>Die Realität ist aber, dass das für die Mehrheit der digitalen Produkte nicht ausreicht. 
Deswegen habe ich beschlossen meine Produkt von Anfang an ind der Öffentlichkeit zu bauen.</p>

<p>Praktisch heißt das, dass ich regelmäßig live auf Twitch programmieren und dabei gerne auch Fragen beantworten werde. 
Aber da das für viele nicht besonder spannend ist werde ich auch noch andere Wege erforschen meine Erfahrungen
im Aufbau dieses Ein-Mann-Unternehmens zu teilen (mehr Blog-Artikel, Instragram, Youtube, Podcasts?).</p>

<p>Falls sich das für dich spannend anhört freue ich mich wenn du dich für meinen wöchentlichen Newsletter einträgst.</p>

<div id="subscribe"></div>

<link rel="stylesheet" href="/assets/interactive/styles.css" />

<script src="/assets/interactive/interactive.js"></script>

<script>
  var variants = Elm.Interactive.init({
    node: document.getElementById('variants'),
    flags: { kind: "Variants", lang: "de" }
  });

  var features = Elm.Interactive.init({
    node: document.getElementById('features'),
    flags: { kind: "Features", lang: "de"  }
  });

  var subscribe = Elm.Interactive.init({
    node: document.getElementById('subscribe'),
    flags: { kind: "Subscribe" }
  });
</script>]]></content><author><name></name></author><summary type="html"><![CDATA[Begleite mich wie ich meinen digitalen Aktenschrank und mein 1-Mann-Startup darum in der Öffentlichkeit baue. Mit langjähriged Erfahrungen in der Softwareentwicklung strebe ich an, eine Lösung zu schaffen, die die Lücke zwischen Bequemlichkeit und Datensicherheit schließt, während ich jeden Schritt des Prozesses mit Dir teile.]]></summary></entry></feed>